// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StgMures.Server.Data;

#nullable disable

namespace StgMures.Server.Migrations
{
    [DbContext(typeof(StgMuresContext))]
    [Migration("20221125101242_InitialGenerated")]
    partial class InitialGenerated
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("StgMures.Server.Models.AnesthesiaConsumable", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<int>("ConsumableId")
                        .HasColumnType("int")
                        .HasColumnName("ConsumableID");

                    b.Property<string>("ShortNote")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SurgeryAnesthesiaId")
                        .HasColumnType("int")
                        .HasColumnName("SurgeryAnesthesiaID");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("char(20)")
                        .IsFixedLength();

                    b.HasKey("Id");

                    b.HasIndex("ConsumableId");

                    b.HasIndex("SurgeryAnesthesiaId");

                    b.ToTable("AnesthesiaConsumable", (string)null);
                });

            modelBuilder.Entity("StgMures.Server.Models.AsociatedDisease", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "IX_AsociatedDiseases");

                    b.ToTable("AsociatedDiseases", t =>
                        {
                            t.HasComment("Contains the list of posible associated diseases a patient may have.\r\nThe primary disease usualy is a serious heart condition which determine the associated ones");
                        });
                });

            modelBuilder.Entity("StgMures.Server.Models.Cec", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AorticClampingDuration")
                        .HasColumnType("int");

                    b.Property<string>("AorticClampingTemperature")
                        .HasMaxLength(20)
                        .HasColumnType("nchar(20)")
                        .IsFixedLength();

                    b.Property<int>("BypasDuration")
                        .HasColumnType("int");

                    b.Property<string>("BypasTemperature")
                        .HasMaxLength(20)
                        .HasColumnType("nchar(20)")
                        .IsFixedLength();

                    b.Property<decimal?>("Flow")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<bool?>("Muff")
                        .HasColumnType("bit")
                        .HasColumnName("MUFF");

                    b.Property<string>("Note")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Oxigenator")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int>("PatientSurgeryId")
                        .HasColumnType("int")
                        .HasColumnName("PatientSurgeryID");

                    b.Property<decimal?>("Priming")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<bool?>("Ultrafiltering")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("PatientSurgeryId");

                    b.ToTable("CEC", null, t =>
                        {
                            t.HasComment("extracorporeal circulation");
                        });
                });

            modelBuilder.Entity("StgMures.Server.Models.Cecconsumable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Cecid")
                        .HasColumnType("int")
                        .HasColumnName("CECID");

                    b.Property<int>("ConsumableId")
                        .HasColumnType("int")
                        .HasColumnName("ConsumableID");

                    b.Property<string>("ShortNote")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("char(20)")
                        .IsFixedLength();

                    b.HasKey("Id");

                    b.HasIndex("Cecid");

                    b.HasIndex("ConsumableId");

                    b.ToTable("CECConsumable", (string)null);
                });

            modelBuilder.Entity("StgMures.Server.Models.Consumable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    b.Property<string>("Design")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("char(20)")
                        .IsFixedLength()
                        .HasComment("biolog; mecanic");

                    b.Property<string>("MeasureUnit")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Descriptive field");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ValueFormat")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("char(20)")
                        .IsFixedLength();

                    b.Property<string>("ValueType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("char(20)")
                        .IsFixedLength()
                        .HasComment("SUBSTANCE;DEVICE;CONSUMABLE;");

                    b.HasKey("Id")
                        .HasName("PK_Material");

                    b.HasIndex("CategoryId");

                    b.ToTable("Consumable", (string)null);
                });

            modelBuilder.Entity("StgMures.Server.Models.ConsumableCategory", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("ConsumableCategory", null, t =>
                        {
                            t.HasComment("type of consumables used in surgery");
                        });
                });

            modelBuilder.Entity("StgMures.Server.Models.Diagnostic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasComment("ValueType may be ");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DiagnosticCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("DiagnosticCategoryID");

                    b.Property<string>("MaxAlertValue")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("char(20)")
                        .IsFixedLength()
                        .HasComment("Max alert value (normal values between min and max)");

                    b.Property<string>("MeasureUnit")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MinAlertValue")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("char(20)")
                        .IsFixedLength()
                        .HasComment("Min alert value (normal values between min and max); ");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("Name of the diagnostic");

                    b.Property<string>("Note")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int")
                        .HasColumnName("ParentID");

                    b.Property<string>("ValueFormat")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("char(20)")
                        .IsFixedLength()
                        .HasComment("Determine the other fields usage: Note, MinAlert, MaxAlert ");

                    b.HasKey("Id")
                        .HasName("PK_MedicalCondition");

                    b.HasIndex("DiagnosticCategoryId");

                    b.ToTable("Diagnostic", null, t =>
                        {
                            t.HasComment("Contains the list of possible diagnostics. \r\nIt is a circular database: a diagnostic can have parent (parentID is not null).\r\nA diagnostic can have multiple 'child diagnostics' (not viceversa), and I will limit the number of levels to 4.\r\nIf parent ID is not null, ValueType is ignored (null or 'p').\r\n");
                        });
                });

            modelBuilder.Entity("StgMures.Server.Models.DiagnosticCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("Medical conditions types / groups - uzually the name of the web page");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nchar(20)")
                        .IsFixedLength()
                        .HasComment("Values: PRIMARY; SECONDARY; ATI; OTHER");

                    b.HasKey("Id")
                        .HasName("PK_MedicalGroup");

                    b.ToTable("DiagnosticCategory", null, t =>
                        {
                            t.HasComment("Categories: gruping the diagnoses");
                        });
                });

            modelBuilder.Entity("StgMures.Server.Models.Medic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("optional: medic' seal");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Note")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Specialty")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id")
                        .HasName("PK_Doctor");

                    b.ToTable("Medic", null, t =>
                        {
                            t.HasComment("Will be sincronised with users table; Medical staff is managed by NOW another app, but that may change");
                        });
                });

            modelBuilder.Entity("StgMures.Server.Models.MedicPatient", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<int>("MedicId")
                        .HasColumnType("int")
                        .HasColumnName("MedicID");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.HasKey("Id");

                    b.HasIndex("MedicId");

                    b.HasIndex("PatientId");

                    b.ToTable("MedicPatient", null, t =>
                        {
                            t.HasComment("Many-to-Many relationship patient-medic");
                        });
                });

            modelBuilder.Entity("StgMures.Server.Models.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("date")
                        .HasComment("Data nasterii");

                    b.Property<string>("BloodGroup")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Grupa Sangvina");

                    b.Property<string>("ChildOrAdult")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasDefaultValueSql("(N'COPIL')")
                        .IsFixedLength()
                        .HasComment("COPIL = child; Not directly related to age but to the specific of the medical procedures");

                    b.Property<string>("Cnascode")
                        .HasMaxLength(30)
                        .HasColumnType("nchar(30)")
                        .HasColumnName("CNASCode")
                        .IsFixedLength();

                    b.Property<string>("Cnp")
                        .HasMaxLength(20)
                        .HasColumnType("nchar(20)")
                        .HasColumnName("CNP")
                        .IsFixedLength()
                        .HasComment("Social Security Number; Romanian CNP is 13 digits length; Newborns may not have it");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("Prenume");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("NUme");

                    b.Property<string>("Note")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasComment("General comments");

                    b.Property<string>("ParentName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nchar(1)")
                        .IsFixedLength();

                    b.HasKey("Id");

                    b.ToTable("Patient", null, t =>
                        {
                            t.HasComment("Patient details; contains only 'fixed details' the variable ones (like weight, height, BMI...) are included in patient's file");
                        });
                });

            modelBuilder.Entity("StgMures.Server.Models.PatientAssocDisease", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AsociatedDiseaseId")
                        .HasColumnType("int")
                        .HasColumnName("AsociatedDiseaseID")
                        .HasComment("Act as a short description");

                    b.Property<bool?>("IntraSurgery")
                        .HasColumnType("bit")
                        .HasComment("Determined intra-surgery");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<string>("Symptom")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("Id");

                    b.HasIndex("AsociatedDiseaseId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientAssocDiseases");
                });

            modelBuilder.Entity("StgMures.Server.Models.PatientDailyTreatment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AdministrationTime")
                        .HasColumnType("smalldatetime");

                    b.Property<decimal?>("Dosage")
                        .HasColumnType("decimal(10, 3)");

                    b.Property<decimal?>("DosageQtty")
                        .HasColumnType("decimal(10, 3)");

                    b.Property<string>("Note")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TreatmentId")
                        .HasColumnType("int")
                        .HasColumnName("TreatmentID");

                    b.HasKey("Id")
                        .HasName("PK_DailyTreatment");

                    b.HasIndex("TreatmentId");

                    b.ToTable("PatientDailyTreatment", (string)null);
                });

            modelBuilder.Entity("StgMures.Server.Models.PatientDiagnostic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("DiagnosticId")
                        .HasColumnType("int")
                        .HasColumnName("DiagnosticID");

                    b.Property<int>("PatientFileId")
                        .HasColumnType("int")
                        .HasColumnName("PatientFileID");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID")
                        .HasComment("optional; PatientFile is enough");

                    b.Property<string>("ShortNote")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Value")
                        .HasMaxLength(20)
                        .HasColumnType("nchar(20)")
                        .IsFixedLength()
                        .HasComment("Value is formated acording to diagnostic.ValueFormat");

                    b.HasKey("Id")
                        .HasName("PK_DailyObservation");

                    b.HasIndex("DiagnosticId");

                    b.HasIndex("PatientFileId");

                    b.ToTable("PatientDiagnostic", (string)null);
                });

            modelBuilder.Entity("StgMures.Server.Models.PatientFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AnotherHospitalAdmission")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<short?>("Atidays")
                        .HasColumnType("smallint")
                        .HasColumnName("ATIDays")
                        .HasComment("In theory it may be calculated; but refer hospital day, not calendaristic day");

                    b.Property<DateTime?>("AtiretakeoverDate")
                        .HasColumnType("date")
                        .HasColumnName("ATIRetakeoverDate");

                    b.Property<DateTime?>("AtitakeOverDate")
                        .HasColumnType("date")
                        .HasColumnName("ATITakeOverDate");

                    b.Property<decimal?>("Bmi")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("BMI");

                    b.Property<decimal?>("Bsa")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("BSA");

                    b.Property<DateTime?>("DischargeDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("FileDate")
                        .HasColumnType("date");

                    b.Property<string>("FileNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("File no asigned by user ");

                    b.Property<decimal?>("Height")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<DateTime?>("HospitalAdmissionDate")
                        .HasColumnType("date");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<short?>("WardDays")
                        .HasColumnType("smallint")
                        .HasComment("In theory it may be calculated; but refer hospital day, not calendaristic day");

                    b.Property<DateTime?>("WardTransferDate")
                        .HasColumnType("date")
                        .HasComment("Data transferului pe sectie");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(10, 3)");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientFile", null, t =>
                        {
                            t.HasComment("A patient usually has one file; but if it comes again, it may be useful to have patient's history");
                        });
                });

            modelBuilder.Entity("StgMures.Server.Models.PatientSurgery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AorticClampDuration")
                        .HasColumnType("int")
                        .HasComment("Minutes");

                    b.Property<int?>("Cecduration")
                        .HasColumnType("int")
                        .HasColumnName("CECDuration")
                        .HasComment("Minutes");

                    b.Property<string>("Complications")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date")
                        .HasComment("Date of the surgery");

                    b.Property<int?>("Duration")
                        .HasColumnType("int")
                        .HasComment("Minutes");

                    b.Property<string>("IncisionType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Incision type");

                    b.Property<int>("PatientFileId")
                        .HasColumnType("int")
                        .HasColumnName("PatientFileID");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<bool?>("Reoperation")
                        .HasColumnType("bit")
                        .HasComment("Yes/No (null=NoNo=No; any other obs means Yes)");

                    b.Property<DateTime?>("ReoperationDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("PatientFileId");

                    b.ToTable("PatientSurgery", (string)null);
                });

            modelBuilder.Entity("StgMures.Server.Models.PatientTreatment", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("Administration")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Dosage")
                        .HasColumnType("decimal(7, 3)");

                    b.Property<string>("DosageNote")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("DosageQtty")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10, 3)")
                        .HasDefaultValueSql("((1))");

                    b.Property<decimal?>("DosageTotal")
                        .HasColumnType("decimal(10, 3)");

                    b.Property<int?>("NoOfDays")
                        .HasColumnType("int");

                    b.Property<int?>("PatientDiagnosticId")
                        .HasColumnType("int")
                        .HasColumnName("PatientDiagnosticID")
                        .HasComment("The treatment may be related to a specific diagnostic. or not");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int>("TreatmentId")
                        .HasColumnType("int")
                        .HasColumnName("TreatmentID");

                    b.Property<string>("TreatmentType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nchar(20)")
                        .IsFixedLength()
                        .HasComment("Tratament (default); Anestezie;CEC;PRIMARY; SECONDARY; ATI; OTHER");

                    b.Property<string>("WeekSchema")
                        .HasMaxLength(7)
                        .HasColumnType("nchar(7)")
                        .IsFixedLength();

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex(new[] { "TreatmentId" }, "AK_PatientTreatment");

                    b.ToTable("PatientTreatment", (string)null);
                });

            modelBuilder.Entity("StgMures.Server.Models.Surgery", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("PatientSurgeryId")
                        .HasColumnType("int")
                        .HasColumnName("PatientSurgeryID");

                    b.Property<int>("SurgicalProcedureId")
                        .HasColumnType("int")
                        .HasColumnName("SurgicalProcedureID");

                    b.HasKey("Id");

                    b.HasIndex("PatientSurgeryId");

                    b.HasIndex("SurgicalProcedureId");

                    b.ToTable("Surgery", null, t =>
                        {
                            t.HasComment("Intersection table: one surgery can have many procedures");
                        });
                });

            modelBuilder.Entity("StgMures.Server.Models.SurgeryAnesthesium", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("date");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("PatientFileId")
                        .HasColumnType("int")
                        .HasColumnName("PatientFileID");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int>("PatientSurgeryId")
                        .HasColumnType("int")
                        .HasColumnName("PatientSurgeryID");

                    b.HasKey("Id");

                    b.HasIndex("PatientSurgeryId");

                    b.ToTable("SurgeryAnesthesia");
                });

            modelBuilder.Entity("StgMures.Server.Models.SurgicalProcedure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int")
                        .HasColumnName("ParentID");

                    b.HasKey("Id");

                    b.ToTable("SurgicalProcedure", (string)null);
                });

            modelBuilder.Entity("StgMures.Server.Models.Treatment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdministrationMethod")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Defaul admin method (dosage, perfusion...) ");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int")
                        .HasColumnName("ParentID");

                    b.Property<int>("TreatmentCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("TreatmentCategoryID");

                    b.Property<string>("ValueType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("TreatmentCategoryId");

                    b.ToTable("Treatment", (string)null);
                });

            modelBuilder.Entity("StgMures.Server.Models.TreatmentCategory", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("TreatmentCategory", (string)null);
                });

            modelBuilder.Entity("StgMures.Server.Models.AnesthesiaConsumable", b =>
                {
                    b.HasOne("StgMures.Server.Models.Consumable", "Consumable")
                        .WithMany("AnesthesiaConsumables")
                        .HasForeignKey("ConsumableId")
                        .IsRequired()
                        .HasConstraintName("FK_AnesthesiaConsumable_Consumable");

                    b.HasOne("StgMures.Server.Models.SurgeryAnesthesium", "SurgeryAnesthesia")
                        .WithMany("AnesthesiaConsumables")
                        .HasForeignKey("SurgeryAnesthesiaId")
                        .IsRequired()
                        .HasConstraintName("FK_AnesthesiaConsumable_SurgeryAnesthesia");

                    b.Navigation("Consumable");

                    b.Navigation("SurgeryAnesthesia");
                });

            modelBuilder.Entity("StgMures.Server.Models.Cec", b =>
                {
                    b.HasOne("StgMures.Server.Models.PatientSurgery", "PatientSurgery")
                        .WithMany("Cecs")
                        .HasForeignKey("PatientSurgeryId")
                        .IsRequired()
                        .HasConstraintName("FK_CEC_PatientSurgery");

                    b.Navigation("PatientSurgery");
                });

            modelBuilder.Entity("StgMures.Server.Models.Cecconsumable", b =>
                {
                    b.HasOne("StgMures.Server.Models.Cec", "Cec")
                        .WithMany("Cecconsumables")
                        .HasForeignKey("Cecid")
                        .IsRequired()
                        .HasConstraintName("FK_CECConsumable_CEC");

                    b.HasOne("StgMures.Server.Models.Consumable", "Consumable")
                        .WithMany("Cecconsumables")
                        .HasForeignKey("ConsumableId")
                        .IsRequired()
                        .HasConstraintName("FK_CECConsumable_Consumable");

                    b.Navigation("Cec");

                    b.Navigation("Consumable");
                });

            modelBuilder.Entity("StgMures.Server.Models.Consumable", b =>
                {
                    b.HasOne("StgMures.Server.Models.ConsumableCategory", "Category")
                        .WithMany("Consumables")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_Consumable_ConsumableCategory");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("StgMures.Server.Models.Diagnostic", b =>
                {
                    b.HasOne("StgMures.Server.Models.DiagnosticCategory", "DiagnosticCategory")
                        .WithMany("Diagnostics")
                        .HasForeignKey("DiagnosticCategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_Diagnostic_DiagnosticCategory");

                    b.Navigation("DiagnosticCategory");
                });

            modelBuilder.Entity("StgMures.Server.Models.MedicPatient", b =>
                {
                    b.HasOne("StgMures.Server.Models.Medic", "Medic")
                        .WithMany("MedicPatients")
                        .HasForeignKey("MedicId")
                        .IsRequired()
                        .HasConstraintName("FK_MedicPatient_Medic");

                    b.HasOne("StgMures.Server.Models.Patient", "Patient")
                        .WithMany("MedicPatients")
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("FK_MedicPatient_Patient");

                    b.Navigation("Medic");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("StgMures.Server.Models.PatientAssocDisease", b =>
                {
                    b.HasOne("StgMures.Server.Models.AsociatedDisease", "AsociatedDisease")
                        .WithMany("PatientAssocDiseases")
                        .HasForeignKey("AsociatedDiseaseId")
                        .IsRequired()
                        .HasConstraintName("FK_PatientAssocDiseases_AsociatedDiseases");

                    b.HasOne("StgMures.Server.Models.Patient", "Patient")
                        .WithMany("PatientAssocDiseases")
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("FK_PatientAssocDiseases_Patient");

                    b.Navigation("AsociatedDisease");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("StgMures.Server.Models.PatientDailyTreatment", b =>
                {
                    b.HasOne("StgMures.Server.Models.PatientTreatment", "Treatment")
                        .WithMany("PatientDailyTreatments")
                        .HasForeignKey("TreatmentId")
                        .IsRequired()
                        .HasConstraintName("FK_PatientDailyTreatment_PatientTreatment");

                    b.Navigation("Treatment");
                });

            modelBuilder.Entity("StgMures.Server.Models.PatientDiagnostic", b =>
                {
                    b.HasOne("StgMures.Server.Models.Diagnostic", "Diagnostic")
                        .WithMany("PatientDiagnostics")
                        .HasForeignKey("DiagnosticId")
                        .IsRequired()
                        .HasConstraintName("FK_PatientDiagnostic_Diagnostic");

                    b.HasOne("StgMures.Server.Models.PatientFile", "PatientFile")
                        .WithMany("PatientDiagnostics")
                        .HasForeignKey("PatientFileId")
                        .IsRequired()
                        .HasConstraintName("FK_PatientDiagnostic_PatientFile");

                    b.Navigation("Diagnostic");

                    b.Navigation("PatientFile");
                });

            modelBuilder.Entity("StgMures.Server.Models.PatientFile", b =>
                {
                    b.HasOne("StgMures.Server.Models.Patient", "Patient")
                        .WithMany("PatientFiles")
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("FK_PatientFile_Patient");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("StgMures.Server.Models.PatientSurgery", b =>
                {
                    b.HasOne("StgMures.Server.Models.PatientFile", "PatientFile")
                        .WithMany("PatientSurgeries")
                        .HasForeignKey("PatientFileId")
                        .IsRequired()
                        .HasConstraintName("FK_PatientSurgery_PatientFile");

                    b.Navigation("PatientFile");
                });

            modelBuilder.Entity("StgMures.Server.Models.PatientTreatment", b =>
                {
                    b.HasOne("StgMures.Server.Models.Patient", "Patient")
                        .WithMany("PatientTreatments")
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("FK_PatientTreatment_Patient");

                    b.HasOne("StgMures.Server.Models.Treatment", "Treatment")
                        .WithMany("PatientTreatments")
                        .HasForeignKey("TreatmentId")
                        .IsRequired()
                        .HasConstraintName("FK_PatientTreatment_Treatment");

                    b.Navigation("Patient");

                    b.Navigation("Treatment");
                });

            modelBuilder.Entity("StgMures.Server.Models.Surgery", b =>
                {
                    b.HasOne("StgMures.Server.Models.PatientSurgery", "PatientSurgery")
                        .WithMany("Surgeries")
                        .HasForeignKey("PatientSurgeryId")
                        .IsRequired()
                        .HasConstraintName("FK_Surgery_PatientSurgery");

                    b.HasOne("StgMures.Server.Models.SurgicalProcedure", "SurgicalProcedure")
                        .WithMany("Surgeries")
                        .HasForeignKey("SurgicalProcedureId")
                        .IsRequired()
                        .HasConstraintName("FK_Surgery_SurgicalProcedure");

                    b.Navigation("PatientSurgery");

                    b.Navigation("SurgicalProcedure");
                });

            modelBuilder.Entity("StgMures.Server.Models.SurgeryAnesthesium", b =>
                {
                    b.HasOne("StgMures.Server.Models.PatientSurgery", "PatientSurgery")
                        .WithMany("SurgeryAnesthesia")
                        .HasForeignKey("PatientSurgeryId")
                        .IsRequired()
                        .HasConstraintName("FK_SurgeryAnesthesia_PatientSurgery");

                    b.Navigation("PatientSurgery");
                });

            modelBuilder.Entity("StgMures.Server.Models.Treatment", b =>
                {
                    b.HasOne("StgMures.Server.Models.TreatmentCategory", "TreatmentCategory")
                        .WithMany("Treatments")
                        .HasForeignKey("TreatmentCategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_Treatment_TreatmentCategory");

                    b.Navigation("TreatmentCategory");
                });

            modelBuilder.Entity("StgMures.Server.Models.AsociatedDisease", b =>
                {
                    b.Navigation("PatientAssocDiseases");
                });

            modelBuilder.Entity("StgMures.Server.Models.Cec", b =>
                {
                    b.Navigation("Cecconsumables");
                });

            modelBuilder.Entity("StgMures.Server.Models.Consumable", b =>
                {
                    b.Navigation("AnesthesiaConsumables");

                    b.Navigation("Cecconsumables");
                });

            modelBuilder.Entity("StgMures.Server.Models.ConsumableCategory", b =>
                {
                    b.Navigation("Consumables");
                });

            modelBuilder.Entity("StgMures.Server.Models.Diagnostic", b =>
                {
                    b.Navigation("PatientDiagnostics");
                });

            modelBuilder.Entity("StgMures.Server.Models.DiagnosticCategory", b =>
                {
                    b.Navigation("Diagnostics");
                });

            modelBuilder.Entity("StgMures.Server.Models.Medic", b =>
                {
                    b.Navigation("MedicPatients");
                });

            modelBuilder.Entity("StgMures.Server.Models.Patient", b =>
                {
                    b.Navigation("MedicPatients");

                    b.Navigation("PatientAssocDiseases");

                    b.Navigation("PatientFiles");

                    b.Navigation("PatientTreatments");
                });

            modelBuilder.Entity("StgMures.Server.Models.PatientFile", b =>
                {
                    b.Navigation("PatientDiagnostics");

                    b.Navigation("PatientSurgeries");
                });

            modelBuilder.Entity("StgMures.Server.Models.PatientSurgery", b =>
                {
                    b.Navigation("Cecs");

                    b.Navigation("Surgeries");

                    b.Navigation("SurgeryAnesthesia");
                });

            modelBuilder.Entity("StgMures.Server.Models.PatientTreatment", b =>
                {
                    b.Navigation("PatientDailyTreatments");
                });

            modelBuilder.Entity("StgMures.Server.Models.SurgeryAnesthesium", b =>
                {
                    b.Navigation("AnesthesiaConsumables");
                });

            modelBuilder.Entity("StgMures.Server.Models.SurgicalProcedure", b =>
                {
                    b.Navigation("Surgeries");
                });

            modelBuilder.Entity("StgMures.Server.Models.Treatment", b =>
                {
                    b.Navigation("PatientTreatments");
                });

            modelBuilder.Entity("StgMures.Server.Models.TreatmentCategory", b =>
                {
                    b.Navigation("Treatments");
                });
#pragma warning restore 612, 618
        }
    }
}
