@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IAuthService AuthService
@inject IToastService ToastService


<EditForm Model="user" OnValidSubmit="HandleLogin" class="bg-light">
    <DataAnnotationsValidator></DataAnnotationsValidator>
        <div class="row" >
            <div class="col-3 .d-md-none"> </div>
            <div class="col-6">
                <div class="row border-bottom">
                    <h4 class="text-primary">Login</h4>
                </div>

                <div class="form-group">
                    <label for="email">Email:</label>
                    <InputText id="email" @bind-Value="user.Email"  class="form-control" placeholder="exemplu@exemplu.com" alt="adresa de email"></InputText>
                </div>

                <div class="form-group">
                    <label for="password">Parola:</label>
                    <InputText id="password" @bind-Value="user.Password" class="form-control" type="password" placeholder="Parola (minim 6 caractere)"></InputText>
                </div>
                <p></p>
                <button type="submit" class="btn btn-primary"> Login </button>
            </div>
            <div class="col-3 .d-md-none"> </div>
        </div>
    <ValidationSummary />
</EditForm>

@code {
    private UserLogin user = new UserLogin();

    private async void HandleLogin()
    {
        var result = await AuthService.Login(user);
        if (result.Success)
        {
            await LocalStorage.SetItemAsync<string>("authToken", result.Data);
            await AuthenticationStateProvider.GetAuthenticationStateAsync();
        }
        else
        {
            ToastService.ShowError(result.Message);
        }
    }
}
