@page "/diagnostic"
@inject IAuthService AuthService
@inject IToastService ToastService
@inject NavigationManager NavigationManager



<EditForm Model="diag" OnValidSubmit="HandleDiagnostic" class="bg-light">
    <DataAnnotationsValidator></DataAnnotationsValidator>
        <div class="row border-bottom">
            <h4 class="text-primary">Definire diagnostice</h4>
        </div>
        <div class="row">
            <!-- categorie, trebuie selectata (sa existe cel putin o categorie in baza)-->
        <div class="col-4">
            <div class="form-group">
                <label for="categoryid">Categorie</label>
                <InputSelect id="categoryid" @bind-Value="diag.DiagnosticCategoryId" class="form-control">
                    <option>Dg.Cardiologic Principal</option>
                    <option>Dg.Cardiologic Secundar</option>
                    <option>Dg.Ati neurologic</option>
                    <option>... se incarca din baza de date...</option>
                </InputSelect>
                <ValidationMessage For="@(() => diag.DiagnosticCategoryId)" />
            </div>
        </div>
        <div class="col-2 offset-6 align-bottom">
            <p></p>
            <button type="submit" class="btn btn-primary ">Inregistreaza</button>
        </div>
    </div>
    <div class="row bg-light" > <!-- -->
        <div class="form-group col-4">
            <label for="name">Denumire diagnostic</label>
            <InputText id="name" @bind-Value="diag.Name" class="form-control"></InputText>
            <ValidationMessage For="@(() => diag.Name)" />
        </div>

        <div class="form-group col-4">
            <label for="parentid">Este optiune pentru diagnosticul:</label>
            <InputSelect id="parentid" @bind-Value="diag.ParentId" class="form-control">
                <option>--</option>
                <option>Diagnostic neurologic</option>
                <option>Fontanela</option>
                <option>Investigatii neurologice</option>
                <option>... se incarca din baza de date...</option>
            </InputSelect>
            <ValidationMessage For="@(() => diag.ParentId)" />
        </div>
        <div class="form-group col-2">
            <label for="valueformat">Format</label> <!-- coded -->
            <InputSelect id="valueformat" @bind-Value="diag.ValueFormat" class="form-control">
                <option>Neformatat(text liber)</option>
                <option>Numar intreg</option>
                <option>Numar zecimal</option>
                <option>Da/Nu</option>
                <option>Data/Timp</option>
            </InputSelect>
            <ValidationMessage For="@(() => diag.ValueFormat)" />
        </div>
        <div class="form-group col-2">
            <label for="measureunit">Unitate masura:</label> <!-- coded -->
            <InputText id="measureunit" @bind-Value="diag.MeasureUnit" class="form-control"></InputText>
            <ValidationMessage For="@(() => diag.MeasureUnit)" />
        </div>
    </div> 

    <div class="row bg-light" > <!-- -->
        <div class="form-group">
            <label for="note">Note/explicatii</label> <!-- coded -->
            <InputTextArea id="note" @bind-Value="diag.Note" class="form-control"></InputTextArea>
            <ValidationMessage For="@(() => diag.Note)" />
        </div>
    </div>
    <p></p>
</EditForm>



@code {
    StgMures.Shared.DbModels.Diagnostic diag = new StgMures.Shared.DbModels.Diagnostic();

    async void HandleDiagnostic()
    {
/*
        var result = await AuthService.Register(user);

        if (result.Success)
        {
            ToastService.ShowSuccess(result.Message);
            NavigationManager.NavigateTo("/");
        }
        else
        {
            ToastService.ShowError(result.Message);
        }

  */
     }

    void HandleInvalidDiagnostic()
    {
        ToastService.ShowError("Internal ERROR");
    }

    protected override async Task OnInitializedAsync()
    {

        // await DiagnosticService.LoadDiagnosticsAsync();
        // await DiagnosticService.LoadDiagnosticCategoriesAsync();

        await base.OnInitializedAsync();
    }

}
