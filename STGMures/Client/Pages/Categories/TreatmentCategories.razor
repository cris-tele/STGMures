@page "/TreatmentCategories"

@inject ITreatmentCategoryService categoryService
@inject MudBlazor.ISnackbar snackBar
@inject ISetAppMenuInfos AppMenu

<!--edit card-->
<MudCard Elevation="5">
    <MudCardContent >
        <MudGrid>
            <MudItem xs="1">
                <MudTextField Class="invisible" Disabled="true" @bind-Value="category.Id" HelperText="ID" Variant="Variant.Text" Margin="Margin.None"></MudTextField>
            </MudItem>
            <MudItem xs="9">
                <MudTextField Disabled="@_enabledOrDisabled" @bind-Value="category.Name" HelperText="Denumire categorie tratamente" Variant="Variant.Text" Margin="Margin.None"></MudTextField>
            </MudItem>
        <MudItem xs="2">
                <MudSelect Disabled="@(_enabledOrDisabled)" T="string" AnchorOrigin="Origin.BottomCenter" @bind-Value="category.Type" HelperText="Tip Tratament" Variant="Variant.Text" Margin="Margin.None">
            @foreach (var _option in StaticParam.TreatmentType)
            {
                <MudSelectItem Value="@_option" />
            }
        </MudSelect>
        </MudItem>
        </MudGrid>


    </MudCardContent>

    <MudDivider DividerType="DividerType.FullWidth" Class="border-3 border-solid mud-border-primary" />

    <MudCardActions>
        <AddUpdateDelete @ref="crudObj" OnValidate="@ValidateAction" ItemsCount="@GetTableItems()" @bind-CRUDStatus=_enabledOrDisabled />
    </MudCardActions>
</MudCard>
<br />


<!--table list-->
<MudTable @ref="@_table" Hover="true" Dense="true" Striped="true" Elevation="5"
          Items="@categories" Filter="new Func<TreatmentCategory, bool>(Search)" @bind-customer="category" OnRowClick="@RowClicked" T="TreatmentCategory">
    <ToolBarContent>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Cautati o categorie..." Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh Class="invisible">ID</MudTh>
        <MudTh Class="col-11">Denumire Categorie Tratamente</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd Class="invisible" DataLabel="Id">@context.Id</MudTd>
        <MudTd Class="col-9" DataLabel="Denumire">@context.Name</MudTd>
        <MudTd Class="col-2" DataLabel="Denumire">@context.Type</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager RowsPerPageString="Randuri pagina:" PageSizeOptions="@(new int[] { 10, 25, 50 , int.MaxValue})"> R</MudTablePager>
    </PagerContent>

</MudTable>




@code {
    private bool _enabledOrDisabled = false;

    private AddUpdateDelete? crudObj;

    private MudTable<TreatmentCategory>? _table;

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            _table!.SetRowsPerPage(10);
        return base.OnAfterRenderAsync(firstRender);
    }


    // data
    private TreatmentCategory category = new TreatmentCategory()  { Id= 0, Name =string.Empty };
    private List<TreatmentCategory> categories = new List<TreatmentCategory>();

    protected override async Task OnInitializedAsync()
    {
        AppMenu.SetPageTitle("Categorii de Tratamente");
        await categoryService.LoadTreatmentCategoriesAsync();
        categories = categoryService.Categories;
        if (_table!.GetFilteredItemsCount() == 0)
            crudObj!.EnableActionsBtn();
    }

    private int GetTableItems()
    {
        if (category is null || category.Id == 0 || _table is null)
            return 0;  // no selection
        return _table.GetFilteredItemsCount();
    }


    protected void RowClicked(TableRowClickEventArgs<TreatmentCategory> clickedCategory)
    {
        crudObj!.EnableActionsBtn();
        crudObj!.RowClicked(_table!);
        SelectCurrentItem(clickedCategory.Item.Id);
    }


    private async Task ValidateAction()
    {
        if (crudObj is null)    // ? Not defined ?
            return;

        switch (crudObj.CurrentAction)
        {
            case ActionState.Read:
                return ;
            case ActionState.Add:
                await categoryService.AddTreatmentCategory(category);
                snackBar.Add("Inregistrare adaugata", Severity.Success);
                break;
            case ActionState.Edit:
                await categoryService.UpdateTreatmentCategory(category);
                snackBar.Add("Inregistrare modificata", Severity.Success);
                break;
            case ActionState.Delete:
                await categoryService.DeleteTreatmentCategory(category.Id);
                snackBar.Add("Inregistrare stearsa", Severity.Success);
                category.Id = 0;
                break;
        }

        categories = categoryService.Categories;
        SelectCurrentItem(category.Id);
        crudObj.DisableEditableFields();
        await Task.Delay(1); // let UI refresh
    }

    // movers
    private string searchString = "";

    private void SelectCurrentItem(int id)
    {
        if (categories.Count == 0)
            return;
        var search = categories.FirstOrDefault(c => c.Id == id);
        if (search is null)
        {
            Console.WriteLine("Not found");
            category.Id = 0;
        }
        else
            category = search;
    }

    private bool Search(TreatmentCategory category)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;

        if (category.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }
        return false;
    }

}
