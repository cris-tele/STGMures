@page "/SurgicalProcedures"

@inject MudBlazor.ISnackbar snackBar
@inject ISetAppMenuInfos AppMenu

@inject StgMures.Client.Services.ISurgicalProcedureService procedureService

<!--edit card-->
<MudCard Elevation="5">
    <!--    <MudCardHeader >  </MudCardHeader> --> <!--Nu stiu daca voi folosi-->
    <MudCardContent>
        <MudGrid>
            <MudItem xs="1">
                <MudTextField Class="invisible" Disabled="true" @bind-Value="tableItem.Id" HelperText="ID" Variant="Variant.Text" Margin="Margin.None"></MudTextField>
            </MudItem>
            <MudItem xs="6">
                <MudTextField Disabled="@_enabledOrDisabled" @bind-Value="tableItem.Name" HelperText="Denumire procedura chirurgicala" Variant="Variant.Text" Margin="Margin.None"></MudTextField>
            </MudItem>
            <MudItem xs="5">
                <MudSelect Disabled="@_enabledOrDisabled" T="int" @bind-Value="tableItem.ParentId" AnchorOrigin="Origin.BottomCenter" HelperText="Optiune pentru procedura" Variant="Variant.Text" Margin="Margin.None">
                    <MudSelectItem Value="0"> </MudSelectItem>  <!-- blank -->
                    @foreach (var _option in parentInfo)
                    {
                        <MudSelectItem Value="@_option.Id">@_option.Name</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
        </MudGrid>
    </MudCardContent>

    <MudDivider DividerType="DividerType.FullWidth" Class="border-3 border-solid mud-border-primary" />

    <MudCardActions>
        <AddUpdateDelete @ref="crudObj" OnValidate="@ValidateAction" ItemsCount="@GetTableItems()" @bind-CRUDStatus=_enabledOrDisabled />
    </MudCardActions>
</MudCard>
<br />


<!--table list-->
<MudTable @ref="@_table" Hover="true" Dense="true" Striped="true" Elevation="5"
          Items="@tableList" Filter="new Func<SurgicalProcedureAndParent, bool>(Search)" @bind-customer="tableItem" OnRowClick="@RowClicked" T="SurgicalProcedureAndParent">
    <ToolBarContent>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Cautati o procedura..." Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh Class="invisible">ID</MudTh>
        <MudTh Class="col-6">Denumire Procedura Chirurgicala</MudTh>
        <MudTh Class="col-5">Optiune pentru procedura</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd Class="invisible" DataLabel="Id">@context.Id</MudTd>
        <MudTd Class="col-6" DataLabel="Denumire procedura">@context.Name</MudTd>
        <MudTd Class="col-5" DataLabel="">@context.ParentName
            <MudIconButton Class="invisible" @onclick="@(()=>SelectCurrentItem(@context.Id))" Color="Color.Primary" Icon="@Icons.Material.Filled.Sync" Size="Size.Small" /> <!-- nu stiu daca e necesar -->
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager RowsPerPageString="Randuri pagina:" PageSizeOptions="@(new int[] { 10, 25, 50 , int.MaxValue})"> R</MudTablePager>
    </PagerContent>

</MudTable>




@code {
    private bool _enabledOrDisabled = false;
    private AddUpdateDelete? crudObj;

    private List<SurgicalProcedure> procedures = new List<SurgicalProcedure>();  // from database
    private MudTable<SurgicalProcedureAndParent>? _table;

    private SurgicalProcedureAndParent tableItem = new() ;
    List<ParentProcInfo> parentInfo = new();
    List<SurgicalProcedureAndParent> tableList = new();


    // data
    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            _table!.SetRowsPerPage(10);
        return base.OnAfterRenderAsync(firstRender);
    }

    protected override async Task OnInitializedAsync()
    {
        AppMenu.SetPageTitle("Categorii de proceduri chirurgicale");
        await procedureService.LoadSurgicalProceduresAsync();
        InitializeLists();
        if (_table!.GetFilteredItemsCount() == 0)
            crudObj!.EnableActionsBtn();
    }

    private void InitializeLists()
    {
        procedures = procedureService.SurgicalProcedures;

        parentInfo = procedures.Select(proc => new ParentProcInfo()     // just because circular table, 
            {
                Id = proc.Id,
                Name = proc.Name
            }).ToList();

        parentInfo.Insert(0, new ParentProcInfo { Id = 0, Name = "-----------" });

        tableList = procedures.SelectMany(
            proc => parentInfo.Where(pare => pare.Id == proc.ParentId).DefaultIfEmpty(),
            (proc, pare) => new SurgicalProcedureAndParent()
                {
                    Id = proc.Id,
                    Name = proc.Name,
                    ParentId = proc.ParentId,
                    ParentName = pare!.Name
                }).ToList();

    }

    private int GetTableItems()
    {
        if (tableItem is null || tableItem.Id == 0 || _table is null)
            return 0;  // no selection
        return _table.GetFilteredItemsCount();
    }

    protected void RowClicked(TableRowClickEventArgs<SurgicalProcedureAndParent> clickedRow)
    {
        crudObj!.EnableActionsBtn();
        crudObj!.RowClicked(_table!);
        SelectCurrentItem(clickedRow.Item.Id);
    }



    private async Task ValidateAction()
    {
        if (crudObj is null)    // ? Not defined ?
            return;

        SurgicalProcedure _procedure = new SurgicalProcedure
            {
                Id = tableItem.Id,
                Name = tableItem.Name,
                ParentId = tableItem.ParentId
            };

        switch (crudObj.CurrentAction)
        {
            case ActionState.Read:
                return;
            case ActionState.Add:
                await procedureService.AddSurgicalProcedure(_procedure);
                snackBar.Add("Inregistrare adaugata", Severity.Success);
                break;
            case ActionState.Edit:
                await procedureService.UpdateSurgicalProcedure(_procedure);
                snackBar.Add("Inregistrare modificata", Severity.Success);
                break;
            case ActionState.Delete:
                await procedureService.DeleteSurgicalProcedure(_procedure.Id);
                snackBar.Add("Inregistrare stearsa", Severity.Success);
                _procedure.Id = 0;
                break;
        }

        InitializeLists();

        SelectCurrentItem(_procedure.Id);
        crudObj.DisableEditableFields();

        await Task.Delay(1); // let UI refresh
    }

    // movers
    private string searchString = "";

    private void SelectCurrentItem(int id)
    {
        var search = tableList.FirstOrDefault(c => c.Id == id);

        if (search is null)
        {
            Console.WriteLine("Not found");
            tableItem.Id = 0;
        }
        else
            tableItem = search;

    }

    private bool Search(SurgicalProcedureAndParent tableItem)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;

        if (tableItem.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }
        return false;
    }

}
