@page "/consumablecategory"
@using StgMures.Shared.DbModels;
@inherits PageBehavior

@inject IConsumableCategoryService categoryService
@inject MudBlazor.ISnackbar snackBar
@inject ISetAppMenuInfos SetAppMenuInfos



<MudCard Elevation="5" Class="gap-0 pa-0 m-0">
    <!--    <MudCardHeader >  </MudCardHeader> --> <!--Nu stiu daca voi folosi-->
    <MudCardContent Class="gap-0 ">
        <MudGrid Class="gap-0 ">
            <MudItem xs="1">
                <MudTextField Class="invisible" Disabled="true" @bind-Value="category.Id" HelperText="ID" Variant="Variant.Text" Margin="Margin.None"></MudTextField>
            </MudItem>
            <MudItem xs="9">
                <MudTextField Disabled="@SetAppMenuInfos.DisabledState" @bind-Value="category.Name" HelperText="Denumire categorie consumabile" Variant="Variant.Text" Margin="Margin.None"></MudTextField>
            </MudItem>
            <MudItem xs="2">
                <MudSelect Disabled="@SetAppMenuInfos.DisabledState" T="string" AnchorOrigin="Origin.BottomCenter" @bind-Value="category.MeasureUnit" HelperText="Unitate masura" Variant="Variant.Text" Margin="Margin.None">
                    @foreach (var _option in StaticParam.ConsumableMeasureUnits)
                    {
                        <MudSelectItem Value="@_option" />
                    }
                </MudSelect>
            </MudItem>
        </MudGrid>
    </MudCardContent>

    <MudDivider DividerType="DividerType.FullWidth" Class="border-3 border-solid mud-border-primary" />

    <MudCardActions>
        <!--         <AddUpdateDelete OnValidate="@ValidateAction" OnCancel="@DisableAll" ItemCount="@categories.Count"/> -->
        <MudGrid>
            <MudItem xs="1">
                <MudTooltip Text="Adauga o noua inregistrare">
                    <MudIconButton Disabled="@_disabledBtn" Icon="@Icons.Material.Filled.Add" Size="Size.Small" Variant="Variant.Text" Color="Color.Primary" OnClick="AddNewRecord">Adauga</MudIconButton>
                </MudTooltip>

                <MudTooltip Text="Modifica inregistrarea selectata">
                    <MudIconButton Disabled="@_disabledBtn" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" Variant="Variant.Text" Color="Color.Primary" OnClick="UpdateRecord">Modifica</MudIconButton>
                </MudTooltip>

                <MudTooltip Text="Sterge inregistrarea selectata">
                    <MudIconButton Disabled="@_disabledBtn" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" Variant="Variant.Text" Color="Color.Primary" OnClick="DeleteRecord">Sterge</MudIconButton>
                </MudTooltip>
            </MudItem>
            <MudItem xs="1" />
            <MudItem xs="1">
                <MudTooltip Text="Validare">
                    <MudIconButton Disabled="@_disabledBtnValid" Icon="@Icons.Material.Filled.Save" Size="Size.Small" Variant="Variant.Text" Color="Color.Success" OnClick="ValidateAction">Ok</MudIconButton>
                </MudTooltip>
                <MudTooltip Text="Renuntare">
                    <MudIconButton Disabled="@_disabledBtnValid" Icon="@Icons.Material.Filled.Cancel" Size="Size.Small" Variant="Variant.Text" Color="Color.Error" OnClick="DisableAll">Cancel</MudIconButton>
                </MudTooltip>
            </MudItem>
        </MudGrid>

    </MudCardActions>
</MudCard>
<br />


<!--table list-->
<MudTable @ref="@_table" Hover="true" Dense="true" Striped="true" Elevation="5"
          Items="@categories" Filter="new Func<ConsumableCategory, bool>(Search)" @bind-customer="category" OnRowClick="@RowClicked" T="ConsumableCategory">
    <ToolBarContent>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Cautati o categorie..." Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <RowTemplate>
        <MudTd Class="invisible" DataLabel="Id">@context.Id</MudTd>
        <MudTd Class="col-9" DataLabel="Denumire">@context.Name </MudTd>
        <MudTd Class="col-2" DataLabel="U.M.">@context.MeasureUnit</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager RowsPerPageString="Randuri pagina:" PageSizeOptions="@(new int[] { 10, 25, 50 , int.MaxValue})"> R</MudTablePager>
    </PagerContent>

</MudTable>




@code {
    // table design


    private MudTable<ConsumableCategory>? _table;

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            _table!.SetRowsPerPage(10);
        return base.OnAfterRenderAsync(firstRender);
    }


    // data
    private ConsumableCategory category = new ConsumableCategory() { Id = 0, Name = string.Empty };
    private List<ConsumableCategory> categories = new List<ConsumableCategory>();

    protected override async Task OnInitializedAsync()
    {
        SetAppMenuInfos.SetPageTitle("Categorii de consumabile");
        await categoryService.LoadConsumableCategoriesAsync();
        categories = categoryService.Categories;
    }



    protected void RowClicked(TableRowClickEventArgs<ConsumableCategory> clickedCategory)
    {
        RowClicked(_table!);
        SelectCurrentItem(clickedCategory.Item.Id);
        EnableActionButtons();
    }


    
    private async Task ValidateAction()
    {
        switch (CurrentAction)
        {
            case (int)_actionbtn.None:
                DisableAll();            // Invalid action, disable all
                return;
            case (int)_actionbtn.Add:
                await categoryService.AddConsumableCategory(category);
                snackBar.Add("Inregistrare adaugata", Severity.Success);
                break;
            case (int)_actionbtn.Edit:
                await categoryService.UpdateConsumableCategory(category);
                snackBar.Add("Inregistrare modificata", Severity.Success);
                break;
            case (int)_actionbtn.Delete:
                if (category.Id == 0)               // Invalid selection
                    return;
                await categoryService.DeleteConsumableCategory(category.Id);
                snackBar.Add("Inregistrare stearsa", Severity.Success);
                break;
        }

        _currentAction = 0;
        categories = categoryService.Categories;

        DisableAll();

        await Task.Delay(1); // let UI refresh
    }
    

    // movers
    private string searchString = "";

    private void SelectCurrentItem(int id)
    {
        if (categories.Count == 0)
            return; 

        category = categories.FirstOrDefault(c => c.Id == id);
    }

    private bool Search(ConsumableCategory category)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;

        if (category.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }
        return false;
    }

}
