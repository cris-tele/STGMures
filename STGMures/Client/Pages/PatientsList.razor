@page "/PatientsList"
@using StgMures.Shared.DbModels;
@inherits PageBehavior
@inject IPatientListService patientListService
@inject MudBlazor.ISnackbar snackBar
@inject ISetAppMenuInfos SetAppMenuInfos
@inject NavigationManager NavigationManager


<MudCard Elevation="5">
    <MudCardContent >
        <MudGrid >
            <!--
            <MudItem xs="1">
                <MudTextField Style="visibility:hidden" Disabled="true" @bind-Value="_currentPatient.Id" Variant="Variant.Text" Margin="Margin.None"></MudTextField>
            </MudItem>
            -->
            <MudItem xs="2">
                <MudTextField Disabled="_disabledField" @bind-Value="_currentPatient.LastName" HelperText="Nume" Variant="Variant.Text" Margin="Margin.None"></MudTextField>
            </MudItem>
            <MudItem xs="2">
                <MudTextField Disabled="_disabledField" @bind-Value="_currentPatient.FirstName" HelperText="Prenume" Variant="Variant.Text" Margin="Margin.None"></MudTextField>
            </MudItem>
            <MudItem xs="1">
                <MudDatePicker Disabled="_disabledField" @bind-Value="_currentPatient.BirthDate" HelperText="Data Nasterii" Variant="Variant.Text" Margin="Margin.None"></MudDatePicker>
            </MudItem>
            <MudItem xs="1">
                <MudSelect Disabled="@_disabledField" T="string" AnchorOrigin="Origin.BottomCenter" @bind-Value="_currentPatient.Sex" HelperText="Sex" Variant="Variant.Text" Margin="Margin.None">
                    @foreach (var _option in StaticParam.Genders)
                    {
                        <MudSelectItem Value="@_option" />
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="1">
                <MudSelect Disabled="@_disabledField" T="string" AnchorOrigin="Origin.BottomCenter" @bind-Value="_currentPatient.BloodGroup" HelperText="Gr.Sangvina" Variant="Variant.Text" Margin="Margin.None">
                    @foreach (var _option in StaticParam.BloodGroup)
                    {
                        <MudSelectItem Value="@_option" />
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="1">
                <MudSelect Disabled="@_disabledField" T="string" AnchorOrigin="Origin.BottomCenter" @bind-Value="_currentPatient.MotherBloodGroup" HelperText="Gr.Sv.Mama" Variant="Variant.Text" Margin="Margin.None">
                    @foreach (var _option in StaticParam.BloodGroup)
                    {
                        <MudSelectItem Value="@_option" />
                    }
                </MudSelect>
            </MudItem>
            <!--cnascode not required for the moment, skipped-->
            <MudItem xs="1">
                <MudTextField Disabled="_disabledField" @bind-Value="_currentPatient.Cnp" HelperText="C.N.P" Variant="Variant.Text" Margin="Margin.None"></MudTextField>
            </MudItem>
            <MudItem xs="3">
                <MudTextField Disabled="_disabledField" @bind-Value="_currentPatient.Note" HelperText="Observatii" Variant="Variant.Text" Margin="Margin.None"></MudTextField>
            </MudItem>
        </MudGrid>
        </MudCardContent>

    <MudDivider DividerType="DividerType.FullWidth" Class="border-3 border-solid mud-border-primary" />

    <MudCardActions>
        <MudGrid>
            <MudItem xs="1">
                <MudTooltip Text="Adauga o noua inregistrare">
                    <MudIconButton Disabled="@_disabledBtn" Icon="@Icons.Material.Filled.Add" Size="Size.Small" Variant="Variant.Text" Color="Color.Success" OnClick="AddNewRecord">Adauga</MudIconButton>
                </MudTooltip>

                <MudTooltip Text="Modifica inregistrarea selectata">
                    <MudIconButton Disabled="@_disabledBtn" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" Variant="Variant.Text" Color="Color.Success" OnClick="UpdateRecord">Modifica</MudIconButton>
                </MudTooltip>

                <MudTooltip Text="Sterge inregistrarea selectata">
                    <MudIconButton Disabled="@_disabledBtn" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" Variant="Variant.Text" Color="Color.Success" OnClick="DeleteRecord">Sterge</MudIconButton>
                </MudTooltip>
            </MudItem>
            <MudItem xs="1" />
            <MudItem xs="1">
                <MudTooltip Text="Validare">
                    <MudIconButton Disabled="@_disabledBtnValid" Icon="@Icons.Material.Filled.Save" Size="Size.Small" Variant="Variant.Text" Color="Color.Success" OnClick="ValidateAction">Ok</MudIconButton>
                </MudTooltip>
                <MudTooltip Text="Renuntare">
                    <MudIconButton Disabled="@_disabledBtnValid" Icon="@Icons.Material.Filled.Cancel" Size="Size.Small" Variant="Variant.Text" Color="Color.Success" OnClick="DisableAll">Cancel</MudIconButton>
                </MudTooltip>
            </MudItem>
            <MudSpacer />

            <MudItem xs="1">
            <MudTooltip Text="Fisa Pacient">
                    <MudButton EndIcon="@Icons.Material.Filled.Description" Size="Size.Small" Variant="Variant.Text" Color="Color.Success" OnClick="NavigateToPatientFile">Fisa</MudButton>
            </MudTooltip>
            </MudItem>
            <MudItem xs="1">
                <MudTooltip Text="Boli Asociate Pacient">
                <MudButton EndIcon="@Icons.Material.Filled.MedicalInformation" Size="Size.Small" Variant="Variant.Text" Color="Color.Success" OnClick="NavigateToAssocDiseases">Boli</MudButton>
            </MudTooltip>
            </MudItem>
            <MudItem xs="1">
                <MudTooltip Text="Tratamente Pacient">
                    <MudButton EndIcon="@Icons.Material.Filled.Biotech" Size="Size.Small" Variant="Variant.Text" Color="Color.Success" OnClick="NavigateToTreatments">Tratamente</MudButton>
                </MudTooltip>
            </MudItem>

        </MudGrid>

    </MudCardActions>

</MudCard>
<br />


<!--table list-->
<MudTable @ref="@_table" Hover="true" Dense="true" Striped="true" Elevation="5" 
          Items="@_patientsList" Filter="new Func<Patient, bool>(Search)" @bind-customer="_currentPatient" OnRowClick="@RowClicked" T="Patient">
    <ToolBarContent>
        <MudSpacer />
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small" ></MudTextField>
    </ToolBarContent>
    <RowTemplate>
        <MudTd Class="col-2" DataLabel="Nume">@context.LastName</MudTd>
        <MudTd Class="col-2" DataLabel="Prenume">@context.FirstName</MudTd>
        <MudTd Class="col-1" DataLabel="Data Nasterii">@context.BirthDate.ToString("MM/dd/yyyy")</MudTd>
        <MudTd Class="col-1" DataLabel="Sex">@context.Sex</MudTd>
        <MudTd Class="col-1" DataLabel="Gr.Sange">@context.BloodGroup</MudTd>
        <MudTd Class="col-1" DataLabel="Gr.Sg.Mama">@context.MotherBloodGroup</MudTd>
        <MudTd Class="col-1">@context.Cnp</MudTd>
        <MudTd Class="col-3" DataLabel="Observatii">@context.Note</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager RowsPerPageString="Randuri pagina:" PageSizeOptions="@(new int[] { 5, 10, 25, 50 , int.MaxValue})"> R</MudTablePager>

    </PagerContent>

</MudTable>



@code {
    // card design 
    // table design
    //      <MudPagination SelectedChanged="PageChanged" Count="@((_table.GetFilteredItemsCount() + _table.RowsPerPage - 1) / _table.RowsPerPage)" Class="pa-4" />
    private MudTable<Patient>? _table;

    // data
    private Patient _currentPatient = new Patient() ;
    private List<Patient> _patientsList = new List<Patient>();

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
            _table.SetRowsPerPage(5);
        return base.OnAfterRenderAsync(firstRender);
    }

    protected override async Task OnInitializedAsync()
    {
        SetAppMenuInfos.SetPageTitle("Lista Pacientilor");
        await patientListService.LoadPatientsAsync();
        _patientsList = patientListService.Patients;
        if (_patientsList.Count() == 0)
        {

            EnableAll();

        }
    }



    protected void RowClicked(TableRowClickEventArgs<Patient> clickedPatient)
    {
        if (_table!.GetFilteredItemsCount() == 0)
            EnableAll();
        if (_table!.SelectedItem == null)
            return;
        SelectCurrentItem(clickedPatient.Item.Id);
        SetAppMenuInfos.SetSelectedPatient(clickedPatient.Item.FirstName + " " + clickedPatient.Item.LastName);
        EnableAll();
    }



    private async Task ValidateAction()
    {
        switch (_currentAction)
        {
            case (int)_actionbtn.None:
                DisableAll();            // Invalid action, disable all 
                return;
            case (int)_actionbtn.Add:
                await patientListService.AddPatient(_currentPatient);
                snackBar.Add("Inregistrare adaugata", Severity.Success);
                break;
            case (int)_actionbtn.Edit:
                await patientListService.UpdatePatient(_currentPatient);
                snackBar.Add("Inregistrare modificata", Severity.Success);
                break;
            case (int)_actionbtn.Delete:
                if (_currentPatient.Id == 0)               // Invalid selection
                    return;
                await patientListService.DeletePatient(_currentPatient.Id);
                snackBar.Add("Inregistrare stearsa", Severity.Success);
                break;
        }

        _currentAction = 0;
        _patientsList = patientListService.Patients;

        DisableAll();

        await Task.Delay(1); // let UI refresh
    }

    // movers
    private string searchString = "";

    private void SelectCurrentItem(int id)
    {
        _currentPatient = _patientsList.FirstOrDefault(c => c.Id == id);
    }

    private bool Search(Patient patient)
    {
        if (string.IsNullOrWhiteSpace(searchString)) 
            return true ;

        if (patient.LastName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }


    void NavigateToPatientFile(MouseEventArgs e)
    {
        if (_currentPatient.Id == 0)
        {
            snackBar.Add("Nici un pacient selectat", Severity.Error);
            NavigationManager.NavigateTo("PatientFilePage");
        }
        else
            NavigationManager.NavigateTo($"PatientFilePage/{_currentPatient.Id}");

    }

    void NavigateToAssocDiseases(MouseEventArgs e)
    {
        if (_currentPatient.Id == 0)
        {
            snackBar.Add("Nici un pacient selectat", Severity.Error);
            NavigationManager.NavigateTo("PatientAssocDiseasePage");
        }
        else
            NavigationManager.NavigateTo($"PatientFilePage/{_currentPatient.Id}");

    }
    void NavigateToTreatments(MouseEventArgs e)
    {
        if (_currentPatient.Id == 0)
        {
            snackBar.Add("Nici un pacient selectat", Severity.Error);
            NavigationManager.NavigateTo("PatientTreatmentPage");
        }
        else
            NavigationManager.NavigateTo($"PatientTreatmentPage/{_currentPatient.Id}");

    }

    
}
