@inherits LayoutComponentBase
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider

@inject ISetAppMenuInfos AppMenu
@implements IDisposable

<!-- <MudThemeProvider /> -->
<MudThemeProvider Theme="SmallFontsTheme" />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Dense="true" Style="@($"background:{Colors.Blue.Lighten3}")" >

        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <!-- _currentPageTitle -->
        <MudElement>@AppMenu.PageTitle</MudElement>
        <AuthorizeView>
            <Authorized>
            <MudSpacer />
                <MudButton StartIcon="@Icons.Material.Filled.HealthAndSafety" Color="Color.Success" Variant="Variant.Text">@context.User.Identity!.Name </MudButton> <!-- detalii doctor-->
            <MudSpacer />
                <MudButton StartIcon="@Icons.Material.Filled.PersonalInjury" Color="Color.Info" Variant="Variant.Text">@AppMenu.PatientName</MudButton> <!-- detalii pacient-->
            <MudSpacer />
            <MudSpacer />
            <MudLink  title="Logout (iesire) din aplicatie" OnClick="@(() =>Logout())">Logout</MudLink>
            </Authorized>
        </AuthorizeView>
    </MudAppBar>
    <MudDrawer @bind-Open="@_drawerOpen">
        <NavMenu/>
    </MudDrawer>
    <MudMainContent >
        <MudContainer MaxWidth="MaxWidth.ExtraLarge">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {

    private async void Logout()
    {
        await LocalStorage.RemoveItemAsync("authToken");
        await AuthStateProvider.GetAuthenticationStateAsync();
        NavigationManager.NavigateTo("/");
    }


    protected override async Task OnInitializedAsync()
    {
        AppMenu.OnChange += StateHasChanged;
        await Task.Delay(1); // let UI refresh
    }

    bool _drawerOpen = true;
    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    public void Dispose()
    {
        AppMenu.OnChange -= StateHasChanged;
    }

    public MudTheme SmallFontsTheme = new MudTheme()
        {
            Typography = new Typography()
            {
                Default = new Default()
                {
                    FontSize = "0.875rem",
                    FontWeight = 400,
                    LineHeight = 1.2
                },
                Body1 = new Body1()
                {
                    FontSize = "0.875rem",
                    FontWeight = 400,
                    LineHeight = 1.2
                },
                Body2 = new Body2()
                {
                    FontSize = "0.750rem",
                    FontWeight = 300,
                    LineHeight = 1
                }

            }
        };

}

