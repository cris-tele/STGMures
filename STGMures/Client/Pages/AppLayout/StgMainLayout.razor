@inherits LayoutComponentBase

@inject ISetAppMenuInfos SetAppMenuInfos
@implements IDisposable

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar>

        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <!-- _currentPageTitle -->
        <MudElement>@SetAppMenuInfos.PageTitle</MudElement>
        <AuthorizeView>
            <Authorized>
            <MudSpacer />
                <MudButton StartIcon="@Icons.Material.Filled.MedicalServices" Color="Color.Error" Variant="Variant.Text">@context.User.Identity!.Name </MudButton>
            <MudSpacer />
                <MudButton StartIcon="@Icons.Material.Outlined.MedicalInformation" Color="Color.Error" Variant="Variant.Text">@SetAppMenuInfos.SelectedPatient</MudButton>
            <MudSpacer />
            </Authorized>
        </AuthorizeView>
        <MudSpacer />
        <MudText Color="Color.Default">S.T.G. Mures ATI</MudText>
    </MudAppBar>
    <MudDrawer @bind-Open="@_drawerOpen">
        <NavMenu/>
    </MudDrawer>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.ExtraLarge">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    /*
    [Parameter]
    public string PRMMedicName { get; set; } = string.Empty;
    [Parameter]
    public string PRMPatientName { get; set; } = string.Empty;
    [Parameter]
    public string PRMPageTitle { get; set; } = string.Empty;
*/


    protected override async Task OnInitializedAsync()
    {
        SetAppMenuInfos.OnChange += StateHasChanged;
        await Task.Delay(1); // let UI refresh
    }

    bool _drawerOpen = true;
    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    public void Dispose()
    {
        SetAppMenuInfos.OnChange -= StateHasChanged;
    }
}

