
@page "/TreatmentsTypes"

@using StgMures.Shared.DbModels
@inherits PageBehavior

@inject StgMures.Client.Services.ITreatmentTypeService treatmentService
@inject MudBlazor.ISnackbar snackBar
@inject ISetAppMenuInfos SetAppMenuInfos

<!--edit card-->
<MudCard Elevation="5">
    <MudCardContent>
        <MudGrid>
            <MudItem xs="4">
                <MudSelect Disabled="@(!_disabledField)" T="int" AnchorOrigin="Origin.BottomCenter" @bind-Value="treatment.TreatmentCategoryId" HelperText="Tratament din categoria" Variant="Variant.Text" Margin="Margin.None">
                    <MudSelectItem Value="0" Disabled="true">Selectati categoria:</MudSelectItem>

                    @foreach (TreatmentCategory _option in categories)
                    {
                        <MudSelectItem Value="@_option.Id" >@_option.Name</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <!--<MudSpacer /> -->
        </MudGrid>

        <MudGrid>

            <MudItem xs="1">
                <MudTextField Class="invisible" Disabled="true" @bind-Value="treatment.Id" HelperText="ID" Variant="Variant.Text" Margin="Margin.None"></MudTextField>
            </MudItem>

            <MudItem xs="3">
                <MudTextField Disabled="@_disabledField" @bind-Value="treatment.Name" HelperText="Denumire tratament" Variant="Variant.Text" Margin="Margin.None"></MudTextField>
            </MudItem>
            <MudItem xs="3">
                <MudSelect Disabled="@_disabledField" T="int" AnchorOrigin="Origin.BottomCenter" @bind-Value="treatment.ParentId" HelperText="Tratament principal" Variant="Variant.Text" Margin="Margin.None">
                    <MudSelectItem Value="0">----------</MudSelectItem> <!-- id= 0 : inseamna ca este principal, nu are un parinte-->
                    @foreach (var _option in parentTreatments)
                    {
                        <MudSelectItem Value="@_option.Name" />
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="1">
                <MudSelect Disabled="@_disabledField" T="string" AnchorOrigin="Origin.BottomCenter" @bind-Value="treatment.ValueFormat" HelperText="Format" Variant="Variant.Text" Margin="Margin.None">
                    @foreach (var _option in StaticParam.FieldFormat)
                    {
                        <MudSelectItem Value="@_option" />
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="2">
                <MudSelect Disabled="@_disabledField" T="string" AnchorOrigin="Origin.BottomCenter" @bind-Value="treatment.AdministrationMethod" HelperText="Mod Administrare" Variant="Variant.Text" Margin="Margin.None">
                    @foreach (var _option in StaticParam.TreatmentAdministrationMethod)
                    {
                        <MudSelectItem Value="@_option" />
                    }
                </MudSelect>
            </MudItem>
            
            <MudItem xs="2">
                <MudSelect Disabled="@_disabledField" T="string" AnchorOrigin="Origin.BottomCenter" @bind-Value="treatment.Type" HelperText="Tip tratament / utilizare" Variant="Variant.Text" Margin="Margin.None">
                @foreach (var _option in StaticParam.TreatmentType)
                {
                    <MudSelectItem Value="@_option" />
                }
                </MudSelect>
            </MudItem>
            
        </MudGrid>
    </MudCardContent>

    <MudDivider DividerType="DividerType.FullWidth" Class="border-3 border-solid mud-border-primary" />

    <MudCardActions>
        <MudGrid>
            <MudItem xs="1">
                <MudTooltip Text="Adauga o noua inregistrare">
                    <MudIconButton Disabled="@_disabledBtn" Icon="@Icons.Material.Filled.Add" Size="Size.Small" Variant="Variant.Text" Color="Color.Success" OnClick="AddNewRecord">Adauga</MudIconButton>
                </MudTooltip>

                <MudTooltip Text="Modifica inregistrarea selectata">
                    <MudIconButton Disabled="@_disabledBtn" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" Variant="Variant.Text" Color="Color.Success" OnClick="UpdateRecord">Modifica</MudIconButton>
                </MudTooltip>

                <MudTooltip Text="Sterge inregistrarea selectata">
                    <MudIconButton Disabled="@_disabledBtn" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" Variant="Variant.Text" Color="Color.Success" OnClick="DeleteRecord">Sterge</MudIconButton>
                </MudTooltip>
            </MudItem>
            <MudItem xs="1" />
            <MudItem xs="1">
                <MudTooltip Text="Validare">
                    <MudIconButton Disabled="@_disabledBtnValid" Icon="@Icons.Material.Filled.Save" Size="Size.Small" Variant="Variant.Text" Color="Color.Success" OnClick="ValidateAction">Ok</MudIconButton>
                </MudTooltip>
                <MudTooltip Text="Renuntare">
                    <MudIconButton Disabled="@_disabledBtnValid" Icon="@Icons.Material.Filled.Cancel" Size="Size.Small" Variant="Variant.Text" Color="Color.Success" OnClick="DisableAll">Cancel</MudIconButton>
                </MudTooltip>
            </MudItem>
        </MudGrid>
    </MudCardActions>
</MudCard>
<br />


<!--table list-->
<MudTable @ref="@_table" Hover="true" Dense="true" Striped="true" Elevation="5" 
    Items="@tableList" Filter="new Func<TreatmentsAndParent, bool>(Search)" @bind-customer="treatment" OnRowClick="@RowClicked" T="TreatmentsAndParent">
    <ToolBarContent>
        <!-- <MudTextField @bind-Value="searchString" Placeholder="Cautati un tratament..." Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small" Class="mt-0"></MudTextField> -->
    </ToolBarContent>
<!--
    <HeaderContent>

        <MudTh>ID</MudTh>
        <MudTh>Denumire Categorie Tratamente</MudTh>
        <MudTh>Actiuni</MudTh>
    </HeaderContent>
-->


    <RowTemplate>
        <MudTd Class="col-1 invisible" DataLabel="Id">@context.Id</MudTd>
        <MudTd Class="col-3" DataLabel="Tip">@context.Name</MudTd>
        <MudTd Class="col-3" DataLabel="Tip">@context.ParentName</MudTd>
        <MudTd Class="col-1" DataLabel="Tip">@context.ValueFormat</MudTd>
        <MudTd Class="col-2" DataLabel="Tip">@context.AdministrationMethod</MudTd>
        <MudTd Class="col-2" DataLabel="Tip">@context.Type</MudTd>
    </RowTemplate>

    <PagerContent>
        <MudTablePager RowsPerPageString="Randuri pagina:" PageSizeOptions="@(new int[] { 10, 25, 50 , int.MaxValue})"> R</MudTablePager>
    </PagerContent>

</MudTable>




@code {
    // card design


    // table design
    private MudTable<TreatmentsAndParent>? _table;

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            _table.SetRowsPerPage(10);
        return base.OnAfterRenderAsync(firstRender);
    }


    // data
    private Treatment treatment = new();                                    // current selected item
    private List<Treatment> treatments = new List<Treatment>();          // all
    private List<Treatment> filteredTreatments = new List<Treatment>();    // parents
    private List<Treatment> parentTreatments = new List<Treatment>();    // parents
    private List<TreatmentsAndParent> tableList = new ();                // shown


    private List<TreatmentCategory> categories = new List<TreatmentCategory>();


    protected override async Task OnInitializedAsync()
    {
        SetAppMenuInfos.SetPageTitle("Tipuri de tratamente");
        await treatmentService.LoadTreatmentsAsync();
        treatments = treatmentService.Types;
        if (treatments.Count == 0)
            EnableAll();
    }



    protected void RowClicked(TableRowClickEventArgs<TreatmentsAndParent> clickedCategory)
    {
        if (_table!.GetFilteredItemsCount() == 0)
            EnableAll();
        if (_table!.SelectedItem == null)
            return;
        SelectCurrentItem(clickedCategory.Item.Id);
        EnableAll();
    }



    private async Task ValidateAction()
    {
        switch (_currentAction)
        {
            case (int)_actionbtn.None:
                DisableAll();            // Invalid action, disable all
                return;
            case (int)_actionbtn.Add:
                await treatmentService.AddTreatment(treatment);
                snackBar.Add("Inregistrare adaugata", Severity.Success);
                break;
            case (int)_actionbtn.Edit:
                await treatmentService.UpdateTreatment(treatment);
                snackBar.Add("Inregistrare modificata", Severity.Success);
                break;
            case (int)_actionbtn.Delete:
                if (treatment.Id == 0)               // Invalid selection
                    return;
                await treatmentService.DeleteTreatment(treatment.Id);
                snackBar.Add("Inregistrare stearsa", Severity.Success);
                break;
        }

        _currentAction = 0;
        treatments = treatmentService.Types;

        DisableAll();

        await Task.Delay(1); // let UI refresh
    }

    // movers
    private string searchString = string.Empty;

    private void SelectCurrentItem(int id)
    {
        treatment = treatments.FirstOrDefault(c => c.Id == id);
    }

    private bool Search(TreatmentsAndParent treatment)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;

        if (treatment.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }
        return false;
    }

    private void CategorySelected(int id)
    {
        if (id != 0)
        {
            filteredTreatments = treatments.Where(c => c.TreatmentCategoryId == id).ToList();
            // selectedDiagnosticCategory = categories.Where(c => c.Id == id).FirstOrDefault();
        }
        else
            filteredTreatments = treatments; // .GetRange(0, consumables.Count); // no filter, copy all; or same list
        parentTreatments = filteredTreatments.GetRange(0, filteredTreatments.Count);
        parentTreatments.Insert(0, new Treatment { Id = 0, ParentId = 0, Name = "-----------" });

        tableList = filteredTreatments.SelectMany(
                filt => parentTreatments.Where(pare => pare.Id == filt.ParentId).DefaultIfEmpty(),
                (filt, pare) => new TreatmentsAndParent()
                    {
                        Id = filt.Id,
                        Name = filt.Name,
                        ParentId = filt.ParentId,
                        TreatmentCategoryId = filt.TreatmentCategoryId,
                        ValueFormat = filt.ValueFormat,
                        Type = filt.Type,
                        AdministrationMethod = filt.AdministrationMethod,
                        ParentName = pare!.Name

                    }).ToList();
    }


}
