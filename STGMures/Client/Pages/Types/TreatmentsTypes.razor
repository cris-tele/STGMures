
@page "/TreatmentsTypes"

@using StgMures.Shared.DbModels
@inherits PageBehavior

@inject ITreatmentCategoryService categoryService
@inject ITreatmentTypeService treatmentService
@inject MudBlazor.ISnackbar snackBar
@inject ISetAppMenuInfos SetAppMenuInfos

<!--edit card-->
<MudCard Elevation="5">
    <MudCardContent>
        <MudGrid>
            <MudItem xs="3">
                <MudSelect ValueChanged="@( id => CategorySelected(id) )"
                           T="int" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Text" Margin="Margin.None" Dense="true">
                    <MudSelectItem Value="0" Disabled="true">Selectati grupa/categoria:</MudSelectItem>

                    @foreach (TreatmentCategory _option in categories)
                    {
                        <MudSelectItem Value="@_option.Id" >@_option.Name</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
        </MudGrid>

        <MudGrid>

            <MudItem xs="1">
                <MudTextField Class="invisible" Disabled="true" @bind-Value="treatment.Id" HelperText="ID" Variant="Variant.Text" Margin="Margin.None"></MudTextField>
            </MudItem>

            <MudItem xs="3">
                <MudTextField Disabled="@_enabledOrDisabled" @bind-Value="treatment.Name" HelperText="Denumire tratament" Variant="Variant.Text" Margin="Margin.None"></MudTextField>
            </MudItem>
            <MudItem xs="2">
                <MudSelect Disabled="@_enabledOrDisabled" T="int" AnchorOrigin="Origin.BottomCenter" @bind-Value="treatment.ParentId" HelperText="Tratament principal" Variant="Variant.Text" Margin="Margin.None">
                    <MudSelectItem Value="0">----------</MudSelectItem> 
                    @foreach (var _option in parentTreatments)
                    {
                        <MudSelectItem Value="@_option.Id">@_option.Name </MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="1">
                <MudSelect Disabled="@_enabledOrDisabled" T="string" AnchorOrigin="Origin.BottomCenter" @bind-Value="treatment.ValueFormat" HelperText="Format" Variant="Variant.Text" Margin="Margin.None">
                    @foreach (var _option in StaticParam.FieldFormat)
                    {
                        <MudSelectItem Value="@_option" />
                    }
                </MudSelect>
            </MudItem>

            <MudItem xs="2">
                <MudSelect Disabled="@_enabledOrDisabled" T="string" AnchorOrigin="Origin.BottomCenter" @bind-Value="treatment.AdministrationMethod" HelperText="Mod Administrare" Variant="Variant.Text" Margin="Margin.None">
                    @foreach (var _option in StaticParam.TreatmentAdministrationMethod)
                    {
                        <MudSelectItem Value="@_option" />
                    }
                </MudSelect>
            </MudItem>

            <MudItem xs="1">
                <MudSelect Disabled="@_enabledOrDisabled" T="string" AnchorOrigin="Origin.BottomCenter" @bind-Value="treatment.MeasureUnit" HelperText="Unitate Masura" Variant="Variant.Text" Margin="Margin.None">
                    @foreach (var _option in StaticParam.SubstanceMeasureUnit)
                    {
                         <MudSelectItem Value="@_option" />
                    }
                </MudSelect>
            </MudItem>

            <MudItem xs="1">
                <MudSelect Disabled="@_enabledOrDisabled" T="string" AnchorOrigin="Origin.BottomCenter" @bind-Value="treatment.Type" HelperText="Tip" Variant="Variant.Text" Margin="Margin.None">
                @foreach (var _option in StaticParam.TreatmentType)
                {
                     <MudSelectItem Value="@_option" />
                }
                </MudSelect>
            </MudItem>
           
        </MudGrid>
    </MudCardContent>

    <MudDivider DividerType="DividerType.FullWidth" Class="border-3 border-solid mud-border-primary" />

    <MudCardActions>
        <AddUpdateDelete @ref="crudObj" OnValidate="@ValidateAction" ItemsCount="@GetTableItems()" @bind-CRUDStatus=_enabledOrDisabled />
    </MudCardActions>
</MudCard>
<br />


<!--table list-->
<MudTable @ref="@_table" Hover="true" Dense="true" Striped="true" Elevation="5" 
    Items="@tableList" Filter="new Func<TreatmentsAndParent, bool>(Search)" @bind-customer="treatment" OnRowClick="@RowClicked" T="TreatmentsAndParent">
    <ToolBarContent>
        <!-- <MudTextField @bind-Value="searchString" Placeholder="Cautati un tratament..." Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small" Class="mt-0"></MudTextField> -->
    </ToolBarContent>


    <RowTemplate>
        <MudTd Class="col-1 invisible" DataLabel="Id">@context.Id</MudTd>
        <MudTd Class="col-3" DataLabel="Tip">@context.Name</MudTd>
        <MudTd Class="col-3" DataLabel="Tip">@context.ParentName</MudTd>
        <MudTd Class="col-1" DataLabel="Tip">@context.ValueFormat</MudTd>
        <MudTd Class="col-2" DataLabel="Tip">@context.AdministrationMethod</MudTd>
        <MudTd Class="col-1" DataLabel="Tip">@context.MeasureUnit</MudTd>
        <MudTd Class="col-1" DataLabel="Tip">@context.Type</MudTd>
    </RowTemplate>

    <PagerContent>
        <MudTablePager RowsPerPageString="Randuri pagina:" PageSizeOptions="@(new int[] { 10, 25, 50 , int.MaxValue})"> R</MudTablePager>
    </PagerContent>

</MudTable>




@code {
    private bool _enabledOrDisabled = true;
    private AddUpdateDelete? crudObj;


    // table design
    private MudTable<TreatmentsAndParent>? _table;

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            _table.SetRowsPerPage(10);
        return base.OnAfterRenderAsync(firstRender);
    }

    private int GetTableItems()
    {
        if (treatment is null || treatment.Id == 0 || _table is null)
            return 0;  // no selection
        var items = _table.GetFilteredItemsCount();
        return items;
    }

    // data
    private Treatment treatment = new();                       // current selected item
    private List<Treatment> treatments = new List<Treatment>();          // all
    private List<Treatment> filteredTreatments = new List<Treatment>();    // parents
    private List<Treatment> parentTreatments = new List<Treatment>();    // parents
    private List<TreatmentsAndParent> tableList = new ();                // shown


    private List<TreatmentCategory> categories = new List<TreatmentCategory>();
    private TreatmentCategory selectedCategory = new ();



    protected override async Task OnInitializedAsync()
    {
        SetAppMenuInfos.SetPageTitle("Tipuri de tratamente");

        await categoryService.LoadTreatmentCategoriesAsync();
        categories = categoryService.Categories;
        if (categories.Count == 0)
            snackBar.Add("Definiti mai intai categoriile de tratamente", Severity.Error);


        await treatmentService.LoadTreatmentsAsync();
        treatments = treatmentService.Types;

        if (treatments.Count > 0)
            CategorySelected(0);

        if (_table!.GetFilteredItemsCount() == 0)
        {
            crudObj!.EnableActionsBtn();
        }

    }



    protected void RowClicked(TableRowClickEventArgs<TreatmentsAndParent> clickedCategory)
    {
        crudObj!.EnableActionsBtn();
        crudObj!.RowClicked(_table!);
        SelectCurrentItem(clickedCategory.Item.Id);
    }



    private async Task ValidateAction()
    {
        if (crudObj is null || treatment is null)    // ? Not defined ?
            return;
        if (selectedCategory.Id == 0 && crudObj.CurrentAction == ActionState.Add)
        {
            snackBar.Add("Nu este selectata o categorie de tratamente", Severity.Error);  // nu ar trebui sa ajunga pe aici, dar nu poate salva fara o categorie
            crudObj.CurrentAction = ActionState.Read;
            return;
        }
        treatment.TreatmentCategoryId = selectedCategory.Id;
        switch (crudObj.CurrentAction)
        {
            case ActionState.Read:
                return;
            case ActionState.Add:
                treatment.Id = 0;
                await treatmentService.AddTreatment(treatment);
                snackBar.Add("Inregistrare adaugata", Severity.Success);
                break;
            case ActionState.Edit:
                await treatmentService.UpdateTreatment(treatment);
                snackBar.Add("Inregistrare modificata", Severity.Success);
                break;
            case ActionState.Delete:
                if (treatment.Id == 0)               // Invalid selection
                {
                    snackBar.Add("Selectati inregistrarea de sters", Severity.Success);
                    return;
                }
                await treatmentService.DeleteTreatment(treatment.Id);
                snackBar.Add("Inregistrare stearsa", Severity.Success);
                break;
        }

        treatments = treatmentService.Types;
        CategorySelected(selectedCategory.Id);    // refilter
        crudObj.Read();
        await Task.Delay(1); // let UI refresh
    }

    // movers
    private string searchString = string.Empty;

    private void SelectCurrentItem(int id)
    {
        treatment = treatments.FirstOrDefault(c => c.Id == id);
    }

    private bool Search(TreatmentsAndParent treatment)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;

        if (treatment.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }
        return false;
    }

    private void CategorySelected(int id)
    {
        if (id != 0)
        {
            filteredTreatments = treatments.Where(c => c.TreatmentCategoryId == id).ToList();
            var selected = categories.Where(c => c.Id == id).FirstOrDefault();
            if (selected is not null)
                selectedCategory.Id = selected.Id;
            else
                selectedCategory.Id = 0;  // stearsa din baza de date ?
        }
        else
        {
            filteredTreatments = treatments; // .GetRange(0, consumables.Count); // no filter, copy all; or same list
        }

        parentTreatments = filteredTreatments.GetRange(0, filteredTreatments.Count);    // copy all
        Treatment emptyT = new() { Id = 0, ParentId = 0, Name = " " };
        parentTreatments.Insert(0, emptyT );
        if (filteredTreatments.Count > 0)
            try
            {

                tableList = filteredTreatments.SelectMany(
                        filt => parentTreatments.Where(pare => pare.Id == filt.ParentId).DefaultIfEmpty(emptyT),
                        (filt, pare) => new TreatmentsAndParent()
                            {
                                Id = filt.Id,
                                Name = filt.Name,
                                ParentId = filt.ParentId,
                                TreatmentCategoryId = filt.TreatmentCategoryId,
                                ValueFormat = filt.ValueFormat,
                                Type = filt.Type,
                                AdministrationMethod = filt.AdministrationMethod,
                                MeasureUnit = filt.MeasureUnit,
                                ParentName = pare?.Name

                            }).ToList();
            } catch { }

        // selection changes -> reinitialise editable fields
        if (treatment is not null)
        {
            treatment.Id = 0;
            treatment.ParentId = 0;
            treatment.TreatmentCategoryId = 0;
            treatment.ValueFormat = string.Empty;
            treatment.AdministrationMethod = string.Empty;
            treatment.MeasureUnit = string.Empty;
            treatment.Name = string.Empty;
            treatment.Type = string.Empty;
        }
        else
        {
            treatment = new();
        }

                    
    }


}
