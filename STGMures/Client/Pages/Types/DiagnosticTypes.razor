@page "/DiagnosticTypes"
@inherits AddUpdateDelete

@inject StgMures.Client.Services.IDiagnosticCategoryService categoryService
@inject StgMures.Client.Services.IDiagnosticTypeService diagnosticService
@inject MudBlazor.ISnackbar snackBar
@inject ISetAppMenuInfos AppMenu

<MudCard Elevation="5">
    <MudCardContent>
        <MudGrid>
            <MudItem xs="3">
                <MudSelect ValueChanged="@( id => CategorySelected(id) )"
                           T="int" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Text" Margin="Margin.None" Dense="true">
                    <MudSelectItem Value="0">Selectati grupa/categoria</MudSelectItem>
                    @foreach (DiagnosticCategory _option in categories)
                    {
                        <MudSelectItem Value="@_option.Id">@_option.Name</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
        </MudGrid>


        <MudGrid>

            <MudItem xs="1">    <!-- folosit pe post de spacer, doar pt aliniere -->
                <MudTextField Class="invisible" Disabled="true" @bind-Value="diagnostic.Id" HelperText="ID" Variant="Variant.Text" Margin="Margin.None"></MudTextField>
            </MudItem>

            <MudItem xs="3">
                <MudTextField Disabled="@_enabledOrDisabled" @bind-Value="diagnostic.Name" HelperText="Denumire diagnostic" Variant="Variant.Text" Margin="Margin.None"></MudTextField>
            </MudItem>
            <MudItem xs="3">
                <MudSelect Disabled="@_enabledOrDisabled" T="int" AnchorOrigin="Origin.BottomCenter" @bind-Value="diagnostic.ParentId" HelperText="Diagnostic principal" Variant="Variant.Text" Margin="Margin.None">
                    <!--  <MudSelectItem Value="0">----------</MudSelectItem> -->
                    @foreach (var _option in parentDiagnostics)
                    {
                        if (_option.ParentId == 0)  // add all without being a child
                        {
                            <MudSelectItem Value="@_option.Id" >@_option.Name </MudSelectItem>
                        }
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="1">
                <MudSelect Disabled="@_enabledOrDisabled" T="string" AnchorOrigin="Origin.BottomCenter" @bind-Value="diagnostic.ValueFormat" HelperText="Format" Variant="Variant.Text" Margin="Margin.None">
                    @foreach (var _option in StaticParam.FieldFormat)
                    {
                        <MudSelectItem Value="@_option" />
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="1">
                <MudSelect Disabled="@_enabledOrDisabled" T="string" AnchorOrigin="Origin.BottomCenter" @bind-Value="diagnostic.MeasureUnit" HelperText="U.M." Variant="Variant.Text" Margin="Margin.None">
                    @foreach (var _option in StaticParam.DiagnosticsMeasureUnits)
                    {
                        <MudSelectItem Value="@_option" />
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="3">
                <MudTextField Disabled="@_enabledOrDisabled" @bind-Value="diagnostic.Note" HelperText="Observatii" Variant="Variant.Text" Margin="Margin.None"></MudTextField>
            </MudItem>
        </MudGrid>
    </MudCardContent>

    <MudDivider DividerType="DividerType.FullWidth" Class="border-3 border-solid mud-border-primary" />

    <MudCardActions>
        <AddUpdateDelete @ref="crudObj" OnValidate="@ValidateAction" ItemsCount="@GetTableItems()" @bind-CRUDStatus=_enabledOrDisabled />
    </MudCardActions>
</MudCard>
<br />


<!--table list-->
<MudTable @ref="@_table" Hover="true" Dense="true" Striped="true" Elevation="5"
          Items="@tableList" Filter="new Func<DiagnosticsAndParent, bool>(Search)" @bind-customer="diagnostic" OnRowClick="@RowClicked" T="DiagnosticsAndParent">

 
    <ToolBarContent>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Cautati un diagnostic..." Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small" Class="mt-0"></MudTextField>
    </ToolBarContent>
<!--
    <HeaderContent>
        <MudTh Class="invisible">ID</MudTh>
        <MudTh>Denumire Categorie Tratamente</MudTh>
        <MudTh>Actiuni</MudTh>
    </HeaderContent>
-->
    
    <RowTemplate>
        <MudTd Class="col-1 invisible" DataLabel="Id">@context.Id</MudTd>
        <MudTd Class="col-3" DataLabel="Tip">@context.Name</MudTd>
        <MudTd Class="col-3" DataLabel="Tip">@context.ParentName</MudTd>
        <MudTd Class="col-1" DataLabel="Tip">@context.ValueFormat</MudTd>
        <MudTd Class="col-1" DataLabel="Tip">@context.MeasureUnit</MudTd>
        <MudTd Class="col-3" DataLabel="Tip">@context.Note</MudTd>
    </RowTemplate>
    
    <PagerContent>
        <MudTablePager RowsPerPageString="Randuri pagina:" PageSizeOptions="@(new int[] { 10, 25, 50 , int.MaxValue})"> R</MudTablePager>
    </PagerContent>

</MudTable>




@code {
    private bool _enabledOrDisabled = false;
    private AddUpdateDelete? crudObj;


    // table design
    private MudTable<DiagnosticsAndParent>? _table;

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            _table!.SetRowsPerPage(10);
        return base.OnAfterRenderAsync(firstRender);
    }


    // data
    private Diagnostic diagnostic = new () ;

    private List<Diagnostic> diagnostics = new List<Diagnostic>();          
    private List<Diagnostic> filteredDiagnostics = new List<Diagnostic>();    // filtered from diagnosticsCategories ; 
    private List<Diagnostic> parentDiagnostics = new List<Diagnostic>();    // filtered from diagnosticsCategories ;

    private List<DiagnosticCategory> categories = new List<DiagnosticCategory>(); // select options
    private DiagnosticCategory  selectedDiagnosticCategory = new();               // selected option

    private List<DiagnosticsAndParent> tableList = new();

    private void CategorySelected(int id)
    {

        if (id != 0)
        {
            filteredDiagnostics = diagnostics.Where(c => c.DiagnosticCategoryId == id).ToList();
            var selected = categories.Where(c => c.Id == id).FirstOrDefault();
            if (selected is not null)
                selectedDiagnosticCategory = selected;
            else
                selectedDiagnosticCategory.Id = 0;
        }
        else
        {
            filteredDiagnostics = diagnostics; // .GetRange(0, consumables.Count); // no filter, copy all; or same list 
        }
        parentDiagnostics = filteredDiagnostics.GetRange(0, filteredDiagnostics.Count) ; // copy
        Diagnostic emptyDiadnostic = new Diagnostic { Id = 0, ParentId = 0, DiagnosticCategoryId = 0, Name = ""};
        parentDiagnostics.Insert(0, emptyDiadnostic);  // se pune una in mudselect
        if (filteredDiagnostics.Count >0)
            try
            {
                tableList = filteredDiagnostics.SelectMany(
                        filt => parentDiagnostics.Where(pare => pare.Id == filt.ParentId).DefaultIfEmpty(emptyDiadnostic),
                        (filt, pare) => new DiagnosticsAndParent()
                        {
                            Id = filt.Id,
                            Name = filt.Name,
                            ParentId = filt.ParentId,
                            DiagnosticCategoryId = filt.DiagnosticCategoryId,
                                ValueFormat = filt.ValueFormat, //string.IsNullOrEmpty(filt.ValueFormat) ? string.Empty : filt.ValueFormat,
                                MeasureUnit = filt.MeasureUnit, // string.IsNullOrEmpty(filt.MeasureUnit) ? string.Empty : filt.MeasureUnit,
                                Note = filt.Note, // string.IsNullOrEmpty(filt.Note) ? string.Empty : filt.Note,
                                MinAlertValue = filt.MinAlertValue, //string.IsNullOrEmpty(filt.MinAlertValue) ? string.Empty : filt.MinAlertValue,
                                MaxAlertValue = filt.MaxAlertValue, // string.IsNullOrEmpty(filt.MaxAlertValue) ? string.Empty : filt.MaxAlertValue,
                            ParentName = pare?.Name
                        }).ToList();
            }
            catch (Exception ex)
            {
                Exception x = ex;
            }

        // selection changes -> reinitialise editable fields
        if (diagnostic is not null)
        {
            diagnostic.Id = 0;
            diagnostic.DiagnosticCategoryId= 0;
            diagnostic.ValueFormat = string.Empty;
            diagnostic.MeasureUnit = string.Empty;
            diagnostic.Name = string.Empty;
            diagnostic.Note = string.Empty;
        }
        else
        {
            diagnostic = new();
        }


    }


    protected override async Task OnInitializedAsync()
    {
        AppMenu.SetPageTitle("Tipuri de diagnostice");

        await categoryService.LoadDiagnosticCategoriesAsync();
        categories = categoryService.Categories;

        await diagnosticService.LoadDiagnosticsAsync();
        diagnostics = diagnosticService.Types;

        if (diagnostics.Count > 0)
            CategorySelected(0);

        if (_table!.GetFilteredItemsCount() == 0)
            crudObj!.EnableActionsBtn();
    }

    private int GetTableItems()
    {
        if (diagnostic is null || diagnostic.Id == 0 || _table is null)
            return 0;  // no selection
        return _table.GetFilteredItemsCount();
    }


    protected void RowClicked(TableRowClickEventArgs<DiagnosticsAndParent> clickedCategory)
    {
        crudObj!.EnableActionsBtn();
        crudObj!.RowClicked(_table!);
        SelectCurrentItem(clickedCategory.Item.Id);
        // CategorySelected(clickedCategory.Item.Id); 
    }



    private async Task ValidateAction()
    {
        if (crudObj is null)    // ? Not defined ?
            return;
        if (selectedDiagnosticCategory.Id == 0 && crudObj.CurrentAction == ActionState.Add)
        {
            snackBar.Add("Nu este selectata o categorie", Severity.Error);  // nu ar trebui sa ajunga pe aici, dar nu poate salva fara o categorie
            crudObj.CurrentAction = ActionState.Read;
            return;
        }

        switch (crudObj.CurrentAction)
        {
            case ActionState.Read:
                return;
            case ActionState.Add:
                diagnostic.DiagnosticCategoryId = selectedDiagnosticCategory.Id;
                diagnostic.Id = 0;
                await diagnosticService.AddDiagnostic(diagnostic);
                snackBar.Add("Inregistrare adaugata", Severity.Success);
                break;
            case ActionState.Edit:
                if (diagnostic.Id == diagnostic.ParentId)
                {
                    snackBar.Add("Un Diagnostic nu poate fi propriul parinte / detaliu", Severity.Success);
                    diagnostic.ParentId = 0; //make it principal
                }
                await diagnosticService.UpdateDiagnostic(diagnostic);
                snackBar.Add("Inregistrare modificata", Severity.Success);
                break;
            case ActionState.Delete:
                if (diagnostic.Id == 0)               // Invalid selection
                    return;
                await diagnosticService.DeleteDiagnostic(diagnostic.Id);
                snackBar.Add("Inregistrare stearsa", Severity.Success);
                break;
        }

        diagnostics = diagnosticService.Types;  //reload
        CategorySelected(selectedDiagnosticCategory.Id);    // refilter
        crudObj.Read();

        await Task.Delay(1); // let UI refresh
    }

    // movers
    private string searchString = string.Empty;

    private void SelectCurrentItem(int id)
    {
        if (diagnostics.Count == 0)
            return;

        var search = filteredDiagnostics.FirstOrDefault(c => c.Id == id);
        if (search is null)
        {
            Console.WriteLine("Not found");
            search = diagnostics.FirstOrDefault(c => c.Id == id);
            if (search!.DiagnosticCategoryId != selectedDiagnosticCategory.Id)
            {
                snackBar.Add("Diagnosticul cautat se regaseste la alta categorie", Severity.Warning);
                Console.WriteLine("Wrong Category");
            }
            diagnostic.Id = 0;
        }
        else
        {
            diagnostic = search;
        }
    }

    private bool Search(DiagnosticsAndParent diagnostic)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;

        if (diagnostic.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase)||
            diagnostic.ParentName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }
        return false;
    }

}
