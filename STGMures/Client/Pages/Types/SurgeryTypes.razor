@page "/SurgeryTypes"

<!-- macheta pentru ceva depanari -->

@using StgMures.Shared.DbModels
@inherits PageBehavior
@inject MudBlazor.ISnackbar snackBar

@inject StgMures.Client.Services.ISurgeryTypeService surgeryService
@inject ISetAppMenuInfos SetAppMenuInfos

<!-- Basically it is an intersection table, will be used only for testing / debug purposes -->

<!--edit card-->
<MudCard Elevation="5">
    <MudCardContent>
        <MudGrid>
            <MudItem xs="1">
                <MudTextField Class="invisible" Disabled="true" @bind-Value="surgery.Id" HelperText="ID" Variant="Variant.Text" Margin="Margin.None"></MudTextField>
            </MudItem>
            <MudItem xs="2">
                <MudTextField Disabled="true" @bind-Value="surgery.SurgicalProcedureId" HelperText="Procedura" Variant="Variant.Text" Margin="Margin.None"></MudTextField>
            </MudItem>
            <MudItem xs="2">
                <MudTextField Disabled="true" @bind-Value="surgery.PatientSurgeryId" HelperText="Op.pacient" Variant="Variant.Text" Margin="Margin.None"></MudTextField>
            </MudItem>
            <MudItem xs="7">
                <MudTextField Disabled="@_disabledField" @bind-Value="surgery.Description" HelperText="Descriere/Observatii" Variant="Variant.Text" Margin="Margin.None"></MudTextField>
            </MudItem>
        </MudGrid>
    </MudCardContent>

    <MudDivider DividerType="DividerType.FullWidth" Class="border-3 border-solid mud-border-primary" />

    <MudCardActions>
        <MudGrid>
            <MudItem xs="1">
                <MudTooltip Text="Adauga o noua inregistrare">
                    <MudIconButton Disabled="@_disabledBtn" Icon="@Icons.Material.Filled.Add" Size="Size.Small" Variant="Variant.Text" Color="Color.Primary" OnClick="AddNewRecord">Adauga</MudIconButton>
                </MudTooltip>

                <MudTooltip Text="Modifica inregistrarea selectata">
                    <MudIconButton Disabled="@_disabledBtn" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" Variant="Variant.Text" Color="Color.Primary" OnClick="UpdateRecord">Modifica</MudIconButton>
                </MudTooltip>

                <MudTooltip Text="Sterge inregistrarea selectata">
                    <MudIconButton Disabled="@_disabledBtn" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" Variant="Variant.Text" Color="Color.Primary" OnClick="DeleteRecord">Sterge</MudIconButton>
                </MudTooltip>
            </MudItem>
            <MudItem xs="1" />
            <MudItem xs="1">
                <MudTooltip Text="Validare">
                    <MudIconButton Disabled="@_disabledBtnValid" Icon="@Icons.Material.Filled.Save" Size="Size.Small" Variant="Variant.Text" Color="Color.Success" OnClick="ValidateAction">Ok</MudIconButton>
                </MudTooltip>
                <MudTooltip Text="Renuntare">
                    <MudIconButton Disabled="@_disabledBtnValid" Icon="@Icons.Material.Filled.Cancel" Size="Size.Small" Variant="Variant.Text" Color="Color.Error" OnClick="DisableAll">Cancel</MudIconButton>
                </MudTooltip>
            </MudItem>
        </MudGrid>
    </MudCardActions>
</MudCard>
<br />


<!--table list-->
<MudTable @ref="@_table" Hover="true" Dense="true" Striped="true" Elevation="5"
          Items="@types" Filter="new Func<Surgery, bool>(Search)" @bind-customer="surgery" OnRowClick="@RowClicked" T="Surgery">

    <HeaderContent>
        <MudTh Class="invisible"></MudTh>
        <MudTh Class="col-2"></MudTh>
        <MudTh Class="col-2" ></MudTh>
        <MudTh Class="col-7">Descriere</MudTh>
    </HeaderContent>

    <RowTemplate>
        <MudTd Class="invisible" DataLabel="Id">@context.Id</MudTd>
        <MudTd Class="col-2" DataLabel="Denumire">@context.SurgicalProcedureId</MudTd>
        <MudTd Class="col-2" DataLabel="">@context.PatientSurgeryId</MudTd>
        <MudTd Class="col-7" DataLabel="">@context.Description
            <MudIconButton @onclick="@(()=>SelectCurrentItem(@context.Id))" Color="Color.Primary" Icon="@Icons.Material.Filled.Sync" Size="Size.Small" />
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager RowsPerPageString="Randuri pagina:" PageSizeOptions="@(new int[] { 5, 10, 25, 50 , int.MaxValue})"> R</MudTablePager>
    </PagerContent>

</MudTable>




@code {
    private MudTable<Surgery>? _table;
    private Surgery surgery = new () ;
    private List<Surgery> types = new List<Surgery>();
    private List<SurgicalProcedure> procedures = new List<SurgicalProcedure>();



    // data
    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            _table.SetRowsPerPage(5);
        return base.OnAfterRenderAsync(firstRender);
    }

    protected override async Task OnInitializedAsync()
    {
        SetAppMenuInfos.SetPageTitle("Tipuri de proceduri chirurgicale / operatii");

        await surgeryService.LoadSurgeryTypesAsync();
        types = surgeryService.Types;
        if (types.Count == 0)
            EnableAll();

    }


    protected void RowClicked(TableRowClickEventArgs<Surgery> clickedCategory)
    {
        if (_table!.GetFilteredItemsCount() == 0)
            EnableAll();
        if (_table!.SelectedItem == null)
            return;
        SelectCurrentItem(clickedCategory.Item.Id);
        EnableAll();
    }



    private async Task ValidateAction()
    {
        switch (_currentAction)
        {
            case (int)_actionbtn.None:
                DisableAll();            // Invalid action, disable all
                return;
            case (int)_actionbtn.Add:
                await surgeryService.AddSurgery(surgery);
                snackBar.Add("Inregistrare adaugata", Severity.Success);
                break;
            case (int)_actionbtn.Edit:
                await surgeryService.UpdateSurgery(surgery);
                snackBar.Add("Inregistrare modificata", Severity.Success);
                break;
            case (int)_actionbtn.Delete:
                if (surgery.Id == 0)               // Invalid selection
                    return;
                await surgeryService.DeleteSurgery(surgery.Id);
                snackBar.Add("Inregistrare stearsa", Severity.Success);
                break;
        }

        _currentAction = 0;
        types = surgeryService.Types;

        DisableAll();

        await Task.Delay(1); // let UI refresh
    }

    // movers
    private string searchString = "";

    private void SelectCurrentItem(int id)
    {
        surgery = types.FirstOrDefault(c => c.Id == id);
    }

    private bool Search(Surgery surgery)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;

        if (surgery.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }
        return false;
    }

}
