@page "/SurgeryTypes"

<!-- inherits may be used because there is only one table on page -->
@inherits AddUpdateDelete

@inject MudBlazor.ISnackbar snackBar

@inject StgMures.Client.Services.ISurgeryTypeService surgeryService
@inject StgMures.Client.Services.ISurgicalProcedureService procedureService
@inject ISetAppMenuInfos AppMenu

<!-- Basically it is an intersection table, will be used only for testing / debug purposes -->

<!--edit card-->
<MudCard Elevation="5">
    <MudCardContent>

        <MudGrid>
            <MudItem xs="1">
                <MudTextField Class="invisible" Disabled="true" @bind-Value="surgery.Id" HelperText="ID" Variant="Variant.Text" Margin="Margin.None"></MudTextField>
            </MudItem>
<!--
            <MudItem xs="2">
                <MudTextField Disabled="true" @bind-Value="surgery.SurgicalProcedureId" HelperText="Procedura" Variant="Variant.Text" Margin="Margin.None"></MudTextField>
            </MudItem>
            <MudItem xs="2">
                <MudTextField Disabled="true" @bind-Value="surgery.PatientSurgeryId" HelperText="Op.pacient" Variant="Variant.Text" Margin="Margin.None"></MudTextField>
            </MudItem>
-->
            <MudItem xs="7">
                <MudTextField Disabled="@_enabledOrDisabled" @bind-Value="surgery.Description" HelperText="Descriere/Observatii" Variant="Variant.Text" Margin="Margin.None"></MudTextField>
            </MudItem>
        </MudGrid>
    </MudCardContent>

    <MudDivider DividerType="DividerType.FullWidth" Class="border-3 border-solid mud-border-primary" />

    <MudCardActions>
        <AddUpdateDelete @ref="crudObj" OnValidate="@ValidateAction" ItemsCount="@GetTableItems()" @bind-CRUDStatus=_enabledOrDisabled />
    </MudCardActions>
</MudCard>
<br />


<!--table list-->
<MudTable @ref="@_table" Hover="true" Dense="true" Striped="true" Elevation="5"
          Items="@surgeries" Filter="new Func<Surgery, bool>(Search)" @bind-customer="surgery" OnRowClick="@RowClicked" T="Surgery">

    <HeaderContent>
        <MudTh Class="invisible"></MudTh>
        <MudTh Class="col-2"></MudTh>
        <MudTh Class="col-2" ></MudTh>
        <MudTh Class="col-7">Descriere</MudTh>
    </HeaderContent>

    <RowTemplate>
        <MudTd Class="invisible" >@context.Id</MudTd>
        <MudTd Class="col-2" >@context.SurgicalProcedureId</MudTd>
        <MudTd Class="col-2" >@context.PatientSurgeryId</MudTd>
        <MudTd Class="col-7" >@context.Description
            <MudIconButton @onclick="@(()=>SelectCurrentItem(@context.Id))" Color="Color.Primary" Icon="@Icons.Material.Filled.Sync" Size="Size.Small" />
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager RowsPerPageString="Randuri pagina:" PageSizeOptions="@(new int[] { 10, 25, 50 , int.MaxValue})"> R</MudTablePager>
    </PagerContent>

</MudTable>




@code {
    private bool _enabledOrDisabled = false;
    private AddUpdateDelete? crudObj;

    private MudTable<Surgery>? _table;

    private Surgery surgery = new () ;
    private List<Surgery> surgeries = new List<Surgery>();
    private List<Surgery> filteredSurgeries = new();    // filtered from diagnosticsCategories ;

    private List<SurgicalProcedureAndParent> surgicalProcedures = new();    //



    // data
    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            _table.SetRowsPerPage(10);
        return base.OnAfterRenderAsync(firstRender);
    }

    protected override async Task OnInitializedAsync()
    {
        AppMenu.SetPageTitle("Tipuri de proceduri chirurgicale / operatii");

        await surgeryService.LoadSurgeryTypesAsync();
        surgeries = surgeryService.Types;
        await procedureService.LoadSurgicalProceduresAsync();

        if (_table!.GetFilteredItemsCount() == 0)
            crudObj!.EnableActionsBtn();
    }

    private void InitializeLists()
    {
        var surgicalProcs = procedureService.SurgicalProcedures;

        var parentInfo = surgicalProcs.Select(proc => new ParentProcInfo()     // just because circular table,
                {
                    Id = proc.Id,
                    Name = proc.Name
                }).ToList();

//      parentInfo.Insert(0, new ParentProcInfo { Id = 0, Name = "-----------" });

        surgicalProcedures = surgicalProcs.SelectMany(
                proc => parentInfo.Where(pare => pare.Id == proc.ParentId).DefaultIfEmpty(),
                (proc, pare) => new SurgicalProcedureAndParent()
                    {
                        Id = proc.Id,
                        Name = proc.Name,
                        ParentId = proc.ParentId,
                        ParentName = pare!.Name
                    }).ToList();

    }


    protected void RowClicked(TableRowClickEventArgs<Surgery> clickedRow)
    {
        crudObj!.EnableActionsBtn();
        crudObj!.RowClicked(_table!);
        SelectCurrentItem(clickedRow.Item.Id);
    }



    private async Task ValidateAction()
    {
        switch (crudObj.CurrentAction)
        {
            case ActionState.Read:
                return;
            case ActionState.Add:
                await surgeryService.AddSurgery(surgery);
                snackBar.Add("Inregistrare adaugata", Severity.Success);
                break;
            case ActionState.Edit:
                await surgeryService.UpdateSurgery(surgery);
                snackBar.Add("Inregistrare modificata", Severity.Success);
                break;
            case ActionState.Delete:
                if (surgery.Id == 0)               // Invalid selection
                    return;
                await surgeryService.DeleteSurgery(surgery.Id);
                snackBar.Add("Inregistrare stearsa", Severity.Success);
                break;
        }

        InitializeLists();

        SelectCurrentItem(surgery.Id);
        crudObj.DisableEditableFields();
        surgeries = surgeryService.Types;


        await Task.Delay(1); // let UI refresh
    }

    // movers
    private string searchString = "";

    private void SelectCurrentItem(int id)
    {
        surgery = surgeries.FirstOrDefault(c => c.Id == id);
    }

    private bool Search(Surgery surgery)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;

        if (surgery.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }
        return false;
    }
    private int GetTableItems()
    {
        if (surgery is null || surgery.Id == 0 || _table is null)
            return 0;  // no selection
        return _table.GetFilteredItemsCount();
    }

}
