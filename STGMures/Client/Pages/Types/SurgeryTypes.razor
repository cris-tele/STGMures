@page "/SurgeryTypes"

<!-- inherits may be used because there is only one table on page -->
@inherits AddUpdateDelete

@inject MudBlazor.ISnackbar snackBar

@inject StgMures.Client.Services.ISurgeryTypeService surgeryService
@inject StgMures.Client.Services.ISurgicalCategoryService categoryService
@inject ISetAppMenuInfos AppMenu

<!-- Basically it is an intersection table, will be used only for testing / debug purposes -->

<!--edit card-->
<MudCard Elevation="5">
    <MudCardContent>
        <MudGrid>
            <MudItem xs="3">
                <!-- Se pune Disabled doar in timpul AddEditDelete-->
                <MudSelect ValueChanged="@( id => CategorySelected(id) )"
                           T="int" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Text" Margin="Margin.None" Dense="true">
                    <MudSelectItem Value="0" Disabled="true">Selectati grupa/categoria:</MudSelectItem>
                    @foreach (SurgicalCategory _option in surgicalCategories)
                    {
                        <MudSelectItem Value="@_option.Id">@_option.Name</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
        </MudGrid>

        <MudGrid>
            <MudItem xs="1">
                <MudTextField Class="invisible" Disabled="true" @bind-Value="surgery.Id" HelperText="ID" Variant="Variant.Text" Margin="Margin.None"></MudTextField>
            </MudItem>
            <MudItem xs="4">
                <MudTextField Disabled="_enabledOrDisabled" @bind-Value="surgery.Name" HelperText="Denumire procedura" Variant="Variant.Text" Margin="Margin.None"></MudTextField>
            </MudItem>
            <MudItem xs="7">
                <MudTextField Disabled="@_enabledOrDisabled" @bind-Value="surgery.Description" HelperText="Descriere/Observatii" Variant="Variant.Text" Margin="Margin.None" Lines="3"></MudTextField>
            </MudItem>
        </MudGrid>
    </MudCardContent>

    <MudDivider DividerType="DividerType.FullWidth" Class="border-3 border-solid mud-border-primary" />

    <MudCardActions>
        <AddUpdateDelete @ref="crudObj" OnValidate="@ValidateAction" ItemsCount="@GetTableItems()" @bind-CRUDStatus=_enabledOrDisabled />
    </MudCardActions>
</MudCard>
<br />


<!--table list-->
<MudTable @ref="@_table" Hover="true" Dense="true" Striped="true" Elevation="5"
          Items="@surgeries" Filter="new Func<Surgery, bool>(Search)" @bind-customer="surgery" OnRowClick="@RowClicked" T="Surgery">
    <RowTemplate>
        <MudTd Class="col-1 invisible" >@context.Id</MudTd>
        <MudTd Class="col-4" >@context.Name</MudTd>
        <MudTd Class="col-7" >@context.Description</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager RowsPerPageString="Randuri pagina:" PageSizeOptions="@(new int[] { 10, 25, 50 , int.MaxValue})"> R</MudTablePager>
    </PagerContent>

</MudTable>




@code {
    private bool _enabledOrDisabled = false;
    private AddUpdateDelete? crudObj;

    private MudTable<Surgery>? _table;

    private Surgery surgery = new () ;
    private List<Surgery> surgeries = new List<Surgery>();
    private List<Surgery> filteredSurgeries = new();    // filtered from surgicalCategories ;

    private List<SurgicalCategory> surgicalCategories = new();    //
    private SurgicalCategory selectedCategory = new();          //


    // data
    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            _table!.SetRowsPerPage(10);
        return base.OnAfterRenderAsync(firstRender);
    }

    protected override async Task OnInitializedAsync()
    {
        AppMenu.SetPageTitle("Proceduri chirurgicale / operatii");

        await categoryService.LoadSurgicalCategoriesAsync();
        surgicalCategories = categoryService.SurgicalCategories;    //MudSelect - 

        await surgeryService.LoadSurgeryTypesAsync();
        surgeries = surgeryService.Types;

        if (surgeries.Count > 0)
            CategorySelected(0);

        if (_table!.GetFilteredItemsCount() == 0)
            crudObj!.EnableActionsBtn();
    }


    protected void RowClicked(TableRowClickEventArgs<Surgery> clickedRow)
    {
        crudObj!.EnableActionsBtn();
        crudObj!.RowClicked(_table!);
        SelectCurrentItem(clickedRow.Item.Id);
    }



    private async Task ValidateAction()
    {
        if (crudObj is null)    // ? Not defined ?
            return;

        if (selectedCategory.Id == 0 && (crudObj.CurrentAction == ActionState.Add))
        {
            snackBar.Add("Nu este selectata o categorie", Severity.Error);  // nu poate adauga fara sa selecteze categoria
            crudObj.CurrentAction = ActionState.Read;
            return;
        }


        surgery.SurgicalCategoryId = selectedCategory.Id;

        switch (crudObj.CurrentAction)
        {
            case ActionState.Read:
                return;
            case ActionState.Add:
                surgery.Id = 0; //identity 
                await surgeryService.AddSurgery(surgery);
                snackBar.Add("Inregistrare adaugata", Severity.Success);
                break;
            case ActionState.Edit:
                await surgeryService.UpdateSurgery(surgery);
                snackBar.Add("Inregistrare modificata", Severity.Success);
                break;
            case ActionState.Delete:
                if (surgery.Id == 0)               // Invalid selection
                    return;
                await surgeryService.DeleteSurgery(surgery.Id);
                snackBar.Add("Inregistrare stearsa", Severity.Success);
                break;
        }


        surgeries = surgeryService.Types;
        CategorySelected(selectedCategory.Id);    // refilter
        crudObj.Read();

        await Task.Delay(1); // let UI refresh
    }

    // movers
    private string searchString = "";

    private void SelectCurrentItem(int id)
    {
        if (surgeries.Count == 0)
            return;

        var search = filteredSurgeries.FirstOrDefault(c => c.Id == id);

        if (search is null)
        {
            Console.WriteLine("Not found");
            search = surgeries.FirstOrDefault(c => c.Id == id);
            if (search!.SurgicalCategoryId != selectedCategory.Id)
            {
                snackBar.Add("Procedura se regaseste la alta categorie", Severity.Warning);
                Console.WriteLine("Wrong Category");
            }
            surgery.Id = 0;
        }
        else
        {
            surgery = search;
        }

    }

    private bool Search(Surgery surgery)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;

        if (surgery.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }
        return false;
    }
    private int GetTableItems()
    {
        if (surgery is null || surgery.Id == 0 || _table is null)
            return 0;  // no selection
        return _table.GetFilteredItemsCount();
    }

    private async void CategorySelected(int id)   // mudselect category
    {
        if (id != 0)
        {
            filteredSurgeries = surgeries.Where(c => c.SurgicalCategoryId == id).ToList();
            var selected = surgicalCategories.Where(c => c.Id == id).FirstOrDefault();
            if (selected is not null)
                selectedCategory = selected;
            else
                selectedCategory.Id = 0;

        }
        else
            filteredSurgeries = surgeries; // .GetRange(0, surgeries.Count); // no filter, copy all or it can be the same list

        // selection changes -> reinitialise editable fields
        if (surgery is not null)
        {
            surgery.Id = 0;
            surgery.SurgicalCategoryId= 0;
            surgery.Name = string.Empty;
            surgery.Description= string.Empty;
        }
        else
        {
            surgery = new();
        }
   
        await InvokeAsync( ()=> StateHasChanged());
    }

}
