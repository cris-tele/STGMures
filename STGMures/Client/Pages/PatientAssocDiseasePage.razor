@page "/PatientAssocDiseasePage"
@page "/PatientAssocDiseasePage/{PatientID:int}"    

@using StgMures.Shared.DbModels
@inherits PageBehavior
@inject MudBlazor.ISnackbar snackBar

@inject StgMures.Client.Services.IPatientAssocDiseaseService diseasesService
@inject StgMures.Client.Services.IDiagnosticTypeService diagnosticService
@inject ISetAppMenuInfos SetAppMenuInfos


<!-- A patient can be in the hospital for a heart desease (a very serios physical and psihological trauma), -->
<!-- The problem with the heart deseases is they "generate" others, like lungs or kidney conditions... and even most unespected ones -->
<!-- Some of them are determined at clinical consult, but there are also associated deseases observed during surgery or post-surgery -->

<!--edit card-->
<MudCard Elevation="5">

    <MudCardContent>
        <MudGrid>
            <!--
            <MudItem xs="1">
                <MudTextField  Disabled="true" @bind-Value="disease.Id" HelperText="ID" Variant="Variant.Text" Margin="Margin.None"></MudTextField>
            </MudItem>
            -->
            <MudItem xs="3">
                <MudSelect Disabled="@_disabledField" T="int" @bind-Value="disease.DiagnosticId" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Text" Margin="Margin.None">
                    <MudSelectItem Value="0" Disabled="true">Selectati boala asociata / diagnosticul</MudSelectItem>
                    @foreach (var _option in diagnostics)
                    {
                        <MudSelectItem Value="@_option">@_option.Name</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="8">
                <MudTextField Disabled="@_disabledField" @bind-Value="disease.Symptom" Label="Descriere / simptom" Variant="Variant.Text" Margin="Margin.None"  DisableUnderLine=true Lines="2"></MudTextField>
            </MudItem>
            <MudItem xs="1">
                <MudTooltip Text="Mod determinare">
                    <MudCheckBox Disabled="@_disabledField" @bind-Checked="disease.IntraSurgery" Label="Intraoperator" LabelPosition="LabelPosition.Start" ></MudCheckBox>
                </MudTooltip>
            </MudItem>
        </MudGrid>
    </MudCardContent>

    <MudDivider DividerType="DividerType.FullWidth" Class="border-3 border-solid mud-border-primary" />

    <MudCardActions>
        <MudGrid>
            <MudItem xs="1">
                <MudTooltip Text="Adauga o noua inregistrare">
                    <MudIconButton Disabled="@_disabledBtn" Icon="@Icons.Material.Filled.Add" Size="Size.Small" Variant="Variant.Text" Color="Color.Success" OnClick="AddNewRecord">Adauga</MudIconButton>
                </MudTooltip>

                <MudTooltip Text="Modifica inregistrarea selectata">
                    <MudIconButton Disabled="@_disabledBtn" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" Variant="Variant.Text" Color="Color.Success" OnClick="UpdateRecord">Modifica</MudIconButton>
                </MudTooltip>

                <MudTooltip Text="Sterge inregistrarea selectata">
                    <MudIconButton Disabled="@_disabledBtn" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" Variant="Variant.Text" Color="Color.Success" OnClick="DeleteRecord">Sterge</MudIconButton>
                </MudTooltip>
            </MudItem>
            <MudItem xs="1" />
            <MudItem xs="1">
                <MudTooltip Text="Validare">
                    <MudIconButton Disabled="@_disabledBtnValid" Icon="@Icons.Material.Filled.Save" Size="Size.Small" Variant="Variant.Text" Color="Color.Success" OnClick="ValidateAction">Ok</MudIconButton>
                </MudTooltip>
                <MudTooltip Text="Renuntare">
                    <MudIconButton Disabled="@_disabledBtnValid" Icon="@Icons.Material.Filled.Cancel" Size="Size.Small" Variant="Variant.Text" Color="Color.Success" OnClick="DisableAll">Cancel</MudIconButton>
                </MudTooltip>
            </MudItem>
        </MudGrid>
    </MudCardActions>
</MudCard>
<br />


<!--table list-->
<MudTable @ref="@_table" Hover="true" Dense="true" Striped="true" Elevation="5"
          Items="@diseases" Filter="new Func<PatientAssocDisease, bool>(Search)" @bind-customer="disease" OnRowClick="@RowClicked" T="PatientAssocDisease">
    <RowTemplate>
        <MudTd Class="col-3" DataLabel="Denumire">@context.DiagnosticId</MudTd>
        <MudTd Class="col-8" DataLabel="">@context.Symptom</MudTd>
        <MudTd Class="col-1" DataLabel=""><MudCheckBox Checked="@context.IntraSurgery"></MudCheckBox></MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager RowsPerPageString="Randuri pagina:" PageSizeOptions="@(new int[] { 10, 25, 50 , int.MaxValue})"> R</MudTablePager>
    </PagerContent>

</MudTable>




@code {
    [Parameter]
    public int? PatientId { get; set; }

    private MudTable<PatientAssocDisease>? _table;

    private PatientAssocDisease disease = new PatientAssocDisease() ;

    private List<PatientAssocDisease> diseases = new List<PatientAssocDisease>();
    private List<Diagnostic> diagnostics = new List<Diagnostic>();          // filtered by diagnosticCategory, TypeOfDiagnosticCategories = ASSOCIATED
    private Patient? patient = null;


    // data
    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            _table!.SetRowsPerPage(10);
        return base.OnAfterRenderAsync(firstRender);
    }

    protected override async Task OnInitializedAsync()
    {
        if (PatientId == 0)
        {
            snackBar.Add("Nici un pacient selectat", Severity.Warning);
            // ar trebui sa cer sa aleaga un pacient, dar probabil nu voi lasa doar navigarea din lista
        }

        SetAppMenuInfos.SetPageTitle("Boli asociate");
        SetAppMenuInfos.SetSelectedPatient(patient!.FirstName + " " + patient!.LastName);   // trebuie sa fie un pacient selectat. Daca nu e, ar trebui sa oblig alegerea unui pacient
        await diseasesService.LoadPatientAssocDiseasesAsync();
        diseases = diseasesService.PatientAssocDiseases;
        if (diseases.Count == 0)
            EnableAll();

    }


    protected void RowClicked(TableRowClickEventArgs<PatientAssocDisease> clickedCategory)
    {
        if (_table!.GetFilteredItemsCount() == 0)
            EnableAll();
        if (_table!.SelectedItem == null)
            return;
        SelectCurrentItem(clickedCategory.Item.Id);
        EnableAll();
    }



    private async Task ValidateAction()
    {
        switch (_currentAction)
        {
            case (int)_actionbtn.None:
                DisableAll();            // Invalid action, disable all
                return;
            case (int)_actionbtn.Add:
                await diseasesService.AddPatientAssocDisease(disease);
                snackBar.Add("Inregistrare adaugata", Severity.Success);
                break;
            case (int)_actionbtn.Edit:
                await diseasesService.UpdatePatientAssocDisease(disease);
                snackBar.Add("Inregistrare modificata", Severity.Success);
                break;
            case (int)_actionbtn.Delete:
                if (disease.Id == 0)               // Invalid selection
                    return;
                await diseasesService.DeletePatientAssocDisease(disease.Id);
                snackBar.Add("Inregistrare stearsa", Severity.Success);
                break;
        }

        _currentAction = 0;
        diseases = diseasesService.PatientAssocDiseases;

        DisableAll();

        await Task.Delay(1); // let UI refresh
    }

    // movers
    private string searchString = "";

    private void SelectCurrentItem(int id)
    {
        disease = diseases.FirstOrDefault(c => c.Id == id);
    }

    private bool Search(PatientAssocDisease disease)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;

        if (disease.Symptom.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }
        return false;
    }

}
